
FreeRTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000528c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800545c  0800545c  0000645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005564  08005564  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005564  08005564  00006564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800556c  0800556c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800556c  0800556c  0000656c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005570  08005570  00006570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005574  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f8  20000060  080055d4  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  080055d4  00007258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146a9  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c8  00000000  00000000  0001b739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0001ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e67  00000000  00000000  0001fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000257a3  00000000  00000000  00020d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177c0  00000000  00000000  000464b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6249  00000000  00000000  0005dc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000516c  00000000  00000000  00143f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014906c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005444 	.word	0x08005444

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005444 	.word	0x08005444

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0xa0>)
 80005f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005fe:	2201      	movs	r2, #1
 8000600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000612:	f000 fc47 	bl	8000ea4 <HAL_ADC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800061c:	f000 fa50 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000620:	2301      	movs	r3, #1
 8000622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000632:	f000 fe19 	bl	8001268 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800063c:	f000 fa40 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000007c 	.word	0x2000007c
 800064c:	40012000 	.word	0x40012000
 8000650:	0f000001 	.word	0x0f000001

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <HAL_ADC_MspInit+0x7c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d127      	bne.n	80006c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067e:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000684:	6453      	str	r3, [r2, #68]	@ 0x44
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pot1_Pin;
 80006ae:	2302      	movs	r3, #2
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pot1_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <HAL_ADC_MspInit+0x84>)
 80006c2:	f001 f8e1 	bl	8001888 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	@ 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000

080006dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <vApplicationGetIdleTaskMemory+0x2c>)
 80006ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	4a06      	ldr	r2, [pc, #24]	@ (800070c <vApplicationGetIdleTaskMemory+0x30>)
 80006f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200000d0 	.word	0x200000d0
 800070c:	20000124 	.word	0x20000124

08000710 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b096      	sub	sp, #88	@ 0x58
 8000714:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask1 */
  osThreadDef(ledTask1, StartDefaultTask, osPriorityIdle, 0, 128);
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_FREERTOS_Init+0x7c>)
 8000718:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800071c:	461d      	mov	r5, r3
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask1Handle = osThreadCreate(osThread(ledTask1), NULL);
 800072a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f002 ffa8 	bl	8003686 <osThreadCreate>
 8000736:	4603      	mov	r3, r0
 8000738:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <MX_FREERTOS_Init+0x80>)
 800073a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartTask */
  osThreadDef(uartTask, StartTask02, osPriorityIdle, 0, 128);
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_FREERTOS_Init+0x84>)
 800073e:	f107 0420 	add.w	r4, r7, #32
 8000742:	461d      	mov	r5, r3
 8000744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000748:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f002 ff95 	bl	8003686 <osThreadCreate>
 800075c:	4603      	mov	r3, r0
 800075e:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <MX_FREERTOS_Init+0x88>)
 8000760:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcTask */
  osThreadDef(adcTask, StartTask03, osPriorityIdle, 0, 128);
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_FREERTOS_Init+0x8c>)
 8000764:	1d3c      	adds	r4, r7, #4
 8000766:	461d      	mov	r5, r3
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcTaskHandle = osThreadCreate(osThread(adcTask), NULL);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f002 ff84 	bl	8003686 <osThreadCreate>
 800077e:	4603      	mov	r3, r0
 8000780:	4a07      	ldr	r2, [pc, #28]	@ (80007a0 <MX_FREERTOS_Init+0x90>)
 8000782:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000784:	bf00      	nop
 8000786:	3758      	adds	r7, #88	@ 0x58
 8000788:	46bd      	mov	sp, r7
 800078a:	bdb0      	pop	{r4, r5, r7, pc}
 800078c:	08005468 	.word	0x08005468
 8000790:	200000c4 	.word	0x200000c4
 8000794:	08005490 	.word	0x08005490
 8000798:	200000c8 	.word	0x200000c8
 800079c:	080054b4 	.word	0x080054b4
 80007a0:	200000cc 	.word	0x200000cc

080007a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007a4:	b5b0      	push	{r4, r5, r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t str[] = "led status change\n";
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <StartDefaultTask+0x4c>)
 80007ae:	f107 040c 	add.w	r4, r7, #12
 80007b2:	461d      	mov	r5, r3
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	682b      	ldr	r3, [r5, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	8022      	strh	r2, [r4, #0]
 80007be:	3402      	adds	r4, #2
 80007c0:	0c1b      	lsrs	r3, r3, #16
 80007c2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, str,  strlen(str), 100);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd21 	bl	8000210 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f107 010c 	add.w	r1, r7, #12
 80007d6:	2364      	movs	r3, #100	@ 0x64
 80007d8:	4806      	ldr	r0, [pc, #24]	@ (80007f4 <StartDefaultTask+0x50>)
 80007da:	f002 fb79 	bl	8002ed0 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007de:	2120      	movs	r1, #32
 80007e0:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <StartDefaultTask+0x54>)
 80007e2:	f001 f9fe 	bl	8001be2 <HAL_GPIO_TogglePin>
    osDelay(10);
 80007e6:	200a      	movs	r0, #10
 80007e8:	f002 ff99 	bl	800371e <osDelay>
  {
 80007ec:	bf00      	nop
 80007ee:	e7dd      	b.n	80007ac <StartDefaultTask+0x8>
 80007f0:	080054d0 	.word	0x080054d0
 80007f4:	20000370 	.word	0x20000370
 80007f8:	40020000 	.word	0x40020000

080007fc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	uint8_t str[] = "system start\n";
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <StartTask02+0x3c>)
 8000806:	f107 0408 	add.w	r4, r7, #8
 800080a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080c:	c407      	stmia	r4!, {r0, r1, r2}
 800080e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, str,  strlen(str), 100);
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fcfb 	bl	8000210 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	f107 0108 	add.w	r1, r7, #8
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <StartTask02+0x40>)
 8000826:	f002 fb53 	bl	8002ed0 <HAL_UART_Transmit>
    osDelay(5000);
 800082a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800082e:	f002 ff76 	bl	800371e <osDelay>
  {
 8000832:	bf00      	nop
 8000834:	e7e6      	b.n	8000804 <StartTask02+0x8>
 8000836:	bf00      	nop
 8000838:	080054e4 	.word	0x080054e4
 800083c:	20000370 	.word	0x20000370

08000840 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	uint8_t str[] = "pot data :";
 8000848:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <StartTask03+0x68>)
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000850:	c303      	stmia	r3!, {r0, r1}
 8000852:	801a      	strh	r2, [r3, #0]
 8000854:	3302      	adds	r3, #2
 8000856:	0c12      	lsrs	r2, r2, #16
 8000858:	701a      	strb	r2, [r3, #0]
	uint32_t pot_data;


	HAL_ADC_Start(&hadc1);
 800085a:	4814      	ldr	r0, [pc, #80]	@ (80008ac <StartTask03+0x6c>)
 800085c:	f000 fb66 	bl	8000f2c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000860:	2164      	movs	r1, #100	@ 0x64
 8000862:	4812      	ldr	r0, [pc, #72]	@ (80008ac <StartTask03+0x6c>)
 8000864:	f000 fc67 	bl	8001136 <HAL_ADC_PollForConversion>
	pot_data = HAL_ADC_GetValue(&hadc1);
 8000868:	4810      	ldr	r0, [pc, #64]	@ (80008ac <StartTask03+0x6c>)
 800086a:	f000 fcef 	bl	800124c <HAL_ADC_GetValue>
 800086e:	6178      	str	r0, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 8000870:	480e      	ldr	r0, [pc, #56]	@ (80008ac <StartTask03+0x6c>)
 8000872:	f000 fc2d 	bl	80010d0 <HAL_ADC_Stop>

	sprintf(str, "pot data :%lu\n", pot_data);
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	490c      	ldr	r1, [pc, #48]	@ (80008b0 <StartTask03+0x70>)
 800087e:	4618      	mov	r0, r3
 8000880:	f004 f940 	bl	8004b04 <siprintf>

	HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29a      	uxth	r2, r3
 8000892:	f107 0108 	add.w	r1, r7, #8
 8000896:	2364      	movs	r3, #100	@ 0x64
 8000898:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <StartTask03+0x74>)
 800089a:	f002 fb19 	bl	8002ed0 <HAL_UART_Transmit>
    osDelay(10);
 800089e:	200a      	movs	r0, #10
 80008a0:	f002 ff3d 	bl	800371e <osDelay>
  {
 80008a4:	bf00      	nop
 80008a6:	e7cf      	b.n	8000848 <StartTask03+0x8>
 80008a8:	08005504 	.word	0x08005504
 80008ac:	2000007c 	.word	0x2000007c
 80008b0:	080054f4 	.word	0x080054f4
 80008b4:	20000370 	.word	0x20000370

080008b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000988 <MX_GPIO_Init+0xd0>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a25      	ldr	r2, [pc, #148]	@ (8000988 <MX_GPIO_Init+0xd0>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a1e      	ldr	r2, [pc, #120]	@ (8000988 <MX_GPIO_Init+0xd0>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a17      	ldr	r2, [pc, #92]	@ (8000988 <MX_GPIO_Init+0xd0>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	4812      	ldr	r0, [pc, #72]	@ (800098c <MX_GPIO_Init+0xd4>)
 8000944:	f001 f934 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800094e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	480c      	ldr	r0, [pc, #48]	@ (8000990 <MX_GPIO_Init+0xd8>)
 8000960:	f000 ff92 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000964:	2320      	movs	r3, #32
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4804      	ldr	r0, [pc, #16]	@ (800098c <MX_GPIO_Init+0xd4>)
 800097c:	f000 ff84 	bl	8001888 <HAL_GPIO_Init>

}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	@ 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000
 8000990:	40020800 	.word	0x40020800

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f000 fa42 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f80c 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f7ff ff8a 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a4:	f000 f9a0 	bl	8000ce8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009a8:	f7ff fe02 	bl	80005b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009ac:	f7ff feb0 	bl	8000710 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009b0:	f002 fe62 	bl	8003678 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <main+0x20>

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	@ 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2234      	movs	r2, #52	@ 0x34
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f004 f8bc 	bl	8004b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <SystemClock_Config+0xdc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a94 <SystemClock_Config+0xdc>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ec:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <SystemClock_Config+0xdc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f8:	2300      	movs	r3, #0
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	4b26      	ldr	r3, [pc, #152]	@ (8000a98 <SystemClock_Config+0xe0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a25      	ldr	r2, [pc, #148]	@ (8000a98 <SystemClock_Config+0xe0>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b23      	ldr	r3, [pc, #140]	@ (8000a98 <SystemClock_Config+0xe0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a2c:	23b4      	movs	r3, #180	@ 0xb4
 8000a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fcb5 	bl	80023b0 <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a4c:	f000 f838 	bl	8000ac0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a50:	f001 f8e2 	bl	8001c18 <HAL_PWREx_EnableOverDrive>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a5a:	f000 f831 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a6a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a74:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 f91b 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a88:	f000 f81a 	bl	8000ac0 <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3750      	adds	r7, #80	@ 0x50
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d101      	bne.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aae:	f000 f9d9 	bl	8000e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40010400 	.word	0x40010400

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_MspInit+0x54>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a11      	ldr	r2, [pc, #68]	@ (8000b20 <HAL_MspInit+0x54>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_MspInit+0x54>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <HAL_MspInit+0x54>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <HAL_MspInit+0x54>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_MspInit+0x54>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	f06f 0001 	mvn.w	r0, #1
 8000b12:	f000 fe8f 	bl	8001834 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	@ 0x30
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <HAL_InitTick+0xd4>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000bf8 <HAL_InitTick+0xd4>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b44:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <HAL_InitTick+0xd4>)
 8000b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b50:	f107 020c 	add.w	r2, r7, #12
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 f9c6 	bl	8001eec <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b60:	f001 f9b0 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8000b64:	4603      	mov	r3, r0
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b6c:	4a23      	ldr	r2, [pc, #140]	@ (8000bfc <HAL_InitTick+0xd8>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	0c9b      	lsrs	r3, r3, #18
 8000b74:	3b01      	subs	r3, #1
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8000b78:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <HAL_InitTick+0xdc>)
 8000b7a:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <HAL_InitTick+0xe0>)
 8000b7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <HAL_InitTick+0xdc>)
 8000b80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b84:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8000b86:	4a1e      	ldr	r2, [pc, #120]	@ (8000c00 <HAL_InitTick+0xdc>)
 8000b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8a:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <HAL_InitTick+0xdc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <HAL_InitTick+0xdc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_InitTick+0xdc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 8000b9e:	4818      	ldr	r0, [pc, #96]	@ (8000c00 <HAL_InitTick+0xdc>)
 8000ba0:	f001 fea4 	bl	80028ec <HAL_TIM_Base_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000baa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d11b      	bne.n	8000bea <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8000bb2:	4813      	ldr	r0, [pc, #76]	@ (8000c00 <HAL_InitTick+0xdc>)
 8000bb4:	f001 fef4 	bl	80029a0 <HAL_TIM_Base_Start_IT>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d111      	bne.n	8000bea <HAL_InitTick+0xc6>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000bc6:	202c      	movs	r0, #44	@ 0x2c
 8000bc8:	f000 fe50 	bl	800186c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	d808      	bhi.n	8000be4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	202c      	movs	r0, #44	@ 0x2c
 8000bd8:	f000 fe2c 	bl	8001834 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e002      	b.n	8000bea <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3730      	adds	r7, #48	@ 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	431bde83 	.word	0x431bde83
 8000c00:	20000324 	.word	0x20000324
 8000c04:	40010400 	.word	0x40010400
 8000c08:	20000004 	.word	0x20000004

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000c4a:	f001 ff19 	bl	8002a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000324 	.word	0x20000324

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f003 ff64 	bl	8004b54 <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20020000 	.word	0x20020000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	2000036c 	.word	0x2000036c
 8000cc0:	20004258 	.word	0x20004258

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <MX_USART2_UART_Init+0x50>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d20:	f002 f886 	bl	8002e30 <HAL_UART_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d2a:	f7ff fec9 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000370 	.word	0x20000370
 8000d38:	40004400 	.word	0x40004400

08000d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a19      	ldr	r2, [pc, #100]	@ (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12b      	bne.n	8000db6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d96:	230c      	movs	r3, #12
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da6:	2307      	movs	r3, #7
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_UART_MspInit+0x8c>)
 8000db2:	f000 fd69 	bl	8001888 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40004400 	.word	0x40004400
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd0:	f7ff ff78 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	@ (8000e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f003 feb1 	bl	8004b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fdc9 	bl	8000994 <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e10:	08005574 	.word	0x08005574
  ldr r2, =_sbss
 8000e14:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e18:	20004258 	.word	0x20004258

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 fce8 	bl	800181e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff fe68 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fe3a 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	200003b8 	.word	0x200003b8

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200003b8 	.word	0x200003b8

08000ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e033      	b.n	8000f22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d109      	bne.n	8000ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fbc6 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d118      	bne.n	8000f14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000eea:	f023 0302 	bic.w	r3, r3, #2
 8000eee:	f043 0202 	orr.w	r2, r3, #2
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fae8 	bl	80014cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	f023 0303 	bic.w	r3, r3, #3
 8000f0a:	f043 0201 	orr.w	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f12:	e001      	b.n	8000f18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Start+0x1a>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e0b2      	b.n	80010ac <HAL_ADC_Start+0x180>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d018      	beq.n	8000f8e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f6c:	4b52      	ldr	r3, [pc, #328]	@ (80010b8 <HAL_ADC_Start+0x18c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a52      	ldr	r2, [pc, #328]	@ (80010bc <HAL_ADC_Start+0x190>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9a      	lsrs	r2, r3, #18
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f80:	e002      	b.n	8000f88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f9      	bne.n	8000f82 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d17a      	bne.n	8001092 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fc6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fda:	d106      	bne.n	8000fea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe0:	f023 0206 	bic.w	r2, r3, #6
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fe8:	e002      	b.n	8000ff0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ff8:	4b31      	ldr	r3, [pc, #196]	@ (80010c0 <HAL_ADC_Start+0x194>)
 8000ffa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001004:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	2b00      	cmp	r3, #0
 8001010:	d12a      	bne.n	8001068 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a2b      	ldr	r2, [pc, #172]	@ (80010c4 <HAL_ADC_Start+0x198>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d015      	beq.n	8001048 <HAL_ADC_Start+0x11c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a29      	ldr	r2, [pc, #164]	@ (80010c8 <HAL_ADC_Start+0x19c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d105      	bne.n	8001032 <HAL_ADC_Start+0x106>
 8001026:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <HAL_ADC_Start+0x194>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00a      	beq.n	8001048 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a25      	ldr	r2, [pc, #148]	@ (80010cc <HAL_ADC_Start+0x1a0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d136      	bne.n	80010aa <HAL_ADC_Start+0x17e>
 800103c:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <HAL_ADC_Start+0x194>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	d130      	bne.n	80010aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d129      	bne.n	80010aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	e020      	b.n	80010aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <HAL_ADC_Start+0x198>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d11b      	bne.n	80010aa <HAL_ADC_Start+0x17e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d114      	bne.n	80010aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	e00b      	b.n	80010aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f043 0210 	orr.w	r2, r3, #16
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000000 	.word	0x20000000
 80010bc:	431bde83 	.word	0x431bde83
 80010c0:	40012300 	.word	0x40012300
 80010c4:	40012000 	.word	0x40012000
 80010c8:	40012100 	.word	0x40012100
 80010cc:	40012200 	.word	0x40012200

080010d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Stop+0x16>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e021      	b.n	800112a <HAL_ADC_Stop+0x5a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0201 	bic.w	r2, r2, #1
 80010fc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d109      	bne.n	8001120 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	f043 0201 	orr.w	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800114e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001152:	d113      	bne.n	800117c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800115e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001162:	d10b      	bne.n	800117c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	f043 0220 	orr.w	r2, r3, #32
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e063      	b.n	8001244 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800117c:	f7ff fe86 	bl	8000e8c <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001182:	e021      	b.n	80011c8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118a:	d01d      	beq.n	80011c8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <HAL_ADC_PollForConversion+0x6c>
 8001192:	f7ff fe7b 	bl	8000e8c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d212      	bcs.n	80011c8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d00b      	beq.n	80011c8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f043 0204 	orr.w	r2, r3, #4
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e03d      	b.n	8001244 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d1d6      	bne.n	8001184 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f06f 0212 	mvn.w	r2, #18
 80011de:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d123      	bne.n	8001242 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d11f      	bne.n	8001242 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001208:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800121a:	2b00      	cmp	r3, #0
 800121c:	d111      	bne.n	8001242 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d105      	bne.n	8001242 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f043 0201 	orr.w	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1c>
 8001280:	2302      	movs	r3, #2
 8001282:	e113      	b.n	80014ac <HAL_ADC_ConfigChannel+0x244>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b09      	cmp	r3, #9
 8001292:	d925      	bls.n	80012e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68d9      	ldr	r1, [r3, #12]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	3b1e      	subs	r3, #30
 80012aa:	2207      	movs	r2, #7
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43da      	mvns	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	400a      	ands	r2, r1
 80012b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68d9      	ldr	r1, [r3, #12]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	4603      	mov	r3, r0
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4403      	add	r3, r0
 80012d2:	3b1e      	subs	r3, #30
 80012d4:	409a      	lsls	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	e022      	b.n	8001326 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6919      	ldr	r1, [r3, #16]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	2207      	movs	r2, #7
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	400a      	ands	r2, r1
 8001302:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6919      	ldr	r1, [r3, #16]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	4603      	mov	r3, r0
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4403      	add	r3, r0
 800131c:	409a      	lsls	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b06      	cmp	r3, #6
 800132c:	d824      	bhi.n	8001378 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	3b05      	subs	r3, #5
 8001340:	221f      	movs	r2, #31
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	400a      	ands	r2, r1
 800134e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	3b05      	subs	r3, #5
 800136a:	fa00 f203 	lsl.w	r2, r0, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	635a      	str	r2, [r3, #52]	@ 0x34
 8001376:	e04c      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b0c      	cmp	r3, #12
 800137e:	d824      	bhi.n	80013ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	3b23      	subs	r3, #35	@ 0x23
 8001392:	221f      	movs	r2, #31
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43da      	mvns	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	400a      	ands	r2, r1
 80013a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	3b23      	subs	r3, #35	@ 0x23
 80013bc:	fa00 f203 	lsl.w	r2, r0, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013c8:	e023      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b41      	subs	r3, #65	@ 0x41
 80013dc:	221f      	movs	r2, #31
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	400a      	ands	r2, r1
 80013ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b41      	subs	r3, #65	@ 0x41
 8001406:	fa00 f203 	lsl.w	r2, r0, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001412:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <HAL_ADC_ConfigChannel+0x250>)
 8001414:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <HAL_ADC_ConfigChannel+0x254>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d10f      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1d8>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b12      	cmp	r3, #18
 8001426:	d10b      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1d      	ldr	r2, [pc, #116]	@ (80014bc <HAL_ADC_ConfigChannel+0x254>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12b      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x23a>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <HAL_ADC_ConfigChannel+0x258>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d003      	beq.n	800145c <HAL_ADC_ConfigChannel+0x1f4>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b11      	cmp	r3, #17
 800145a:	d122      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <HAL_ADC_ConfigChannel+0x258>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d111      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_ADC_ConfigChannel+0x25c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a11      	ldr	r2, [pc, #68]	@ (80014c8 <HAL_ADC_ConfigChannel+0x260>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	0c9a      	lsrs	r2, r3, #18
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001494:	e002      	b.n	800149c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3b01      	subs	r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f9      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40012300 	.word	0x40012300
 80014bc:	40012000 	.word	0x40012000
 80014c0:	10000012 	.word	0x10000012
 80014c4:	20000000 	.word	0x20000000
 80014c8:	431bde83 	.word	0x431bde83

080014cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d4:	4b79      	ldr	r3, [pc, #484]	@ (80016bc <ADC_Init+0x1f0>)
 80014d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	431a      	orrs	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	021a      	lsls	r2, r3, #8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001546:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6899      	ldr	r1, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155e:	4a58      	ldr	r2, [pc, #352]	@ (80016c0 <ADC_Init+0x1f4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d022      	beq.n	80015aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001572:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6899      	ldr	r1, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	e00f      	b.n	80015ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0202 	bic.w	r2, r2, #2
 80015d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6899      	ldr	r1, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e1b      	ldrb	r3, [r3, #24]
 80015e4:	005a      	lsls	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01b      	beq.n	8001630 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001606:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001616:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6859      	ldr	r1, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	3b01      	subs	r3, #1
 8001624:	035a      	lsls	r2, r3, #13
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	e007      	b.n	8001640 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800163e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	3b01      	subs	r3, #1
 800165c:	051a      	lsls	r2, r3, #20
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001682:	025a      	lsls	r2, r3, #9
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800169a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6899      	ldr	r1, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	029a      	lsls	r2, r3, #10
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	609a      	str	r2, [r3, #8]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40012300 	.word	0x40012300
 80016c0:	0f000001 	.word	0x0f000001

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	@ (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	@ (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	@ (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	@ 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff4c 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001846:	f7ff ff61 	bl	800170c <__NVIC_GetPriorityGrouping>
 800184a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	6978      	ldr	r0, [r7, #20]
 8001852:	f7ff ffb1 	bl	80017b8 <NVIC_EncodePriority>
 8001856:	4602      	mov	r2, r0
 8001858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff80 	bl	8001764 <__NVIC_SetPriority>
}
 8001864:	bf00      	nop
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff54 	bl	8001728 <__NVIC_EnableIRQ>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e165      	b.n	8001b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a4:	2201      	movs	r2, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f040 8154 	bne.w	8001b6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d005      	beq.n	80018da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d130      	bne.n	800193c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 0201 	and.w	r2, r3, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b03      	cmp	r3, #3
 8001946:	d017      	beq.n	8001978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d123      	bne.n	80019cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	08da      	lsrs	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3208      	adds	r2, #8
 800198c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	08da      	lsrs	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3208      	adds	r2, #8
 80019c6:	69b9      	ldr	r1, [r7, #24]
 80019c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80ae 	beq.w	8001b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b5d      	ldr	r3, [pc, #372]	@ (8001b88 <HAL_GPIO_Init+0x300>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	4a5c      	ldr	r2, [pc, #368]	@ (8001b88 <HAL_GPIO_Init+0x300>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b88 <HAL_GPIO_Init+0x300>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2a:	4a58      	ldr	r2, [pc, #352]	@ (8001b8c <HAL_GPIO_Init+0x304>)
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4f      	ldr	r2, [pc, #316]	@ (8001b90 <HAL_GPIO_Init+0x308>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d025      	beq.n	8001aa2 <HAL_GPIO_Init+0x21a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	@ (8001b94 <HAL_GPIO_Init+0x30c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01f      	beq.n	8001a9e <HAL_GPIO_Init+0x216>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4d      	ldr	r2, [pc, #308]	@ (8001b98 <HAL_GPIO_Init+0x310>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x212>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4c      	ldr	r2, [pc, #304]	@ (8001b9c <HAL_GPIO_Init+0x314>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x20e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba0 <HAL_GPIO_Init+0x318>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x20a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba4 <HAL_GPIO_Init+0x31c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x206>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a49      	ldr	r2, [pc, #292]	@ (8001ba8 <HAL_GPIO_Init+0x320>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x202>
 8001a86:	2306      	movs	r3, #6
 8001a88:	e00c      	b.n	8001aa4 <HAL_GPIO_Init+0x21c>
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	e00a      	b.n	8001aa4 <HAL_GPIO_Init+0x21c>
 8001a8e:	2305      	movs	r3, #5
 8001a90:	e008      	b.n	8001aa4 <HAL_GPIO_Init+0x21c>
 8001a92:	2304      	movs	r3, #4
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x21c>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_Init+0x21c>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_Init+0x21c>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x21c>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	f002 0203 	and.w	r2, r2, #3
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4093      	lsls	r3, r2
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab4:	4935      	ldr	r1, [pc, #212]	@ (8001b8c <HAL_GPIO_Init+0x304>)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bac <HAL_GPIO_Init+0x324>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae6:	4a31      	ldr	r2, [pc, #196]	@ (8001bac <HAL_GPIO_Init+0x324>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aec:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <HAL_GPIO_Init+0x324>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b10:	4a26      	ldr	r2, [pc, #152]	@ (8001bac <HAL_GPIO_Init+0x324>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b16:	4b25      	ldr	r3, [pc, #148]	@ (8001bac <HAL_GPIO_Init+0x324>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bac <HAL_GPIO_Init+0x324>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <HAL_GPIO_Init+0x324>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b64:	4a11      	ldr	r2, [pc, #68]	@ (8001bac <HAL_GPIO_Init+0x324>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	f67f ae96 	bls.w	80018a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3724      	adds	r7, #36	@ 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40013800 	.word	0x40013800
 8001b90:	40020000 	.word	0x40020000
 8001b94:	40020400 	.word	0x40020400
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40021400 	.word	0x40021400
 8001ba8:	40021800 	.word	0x40021800
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf4:	887a      	ldrh	r2, [r7, #2]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	400b      	ands	r3, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_PWREx_EnableOverDrive+0x94>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c44:	f7ff f922 	bl	8000e8c <HAL_GetTick>
 8001c48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c4a:	e009      	b.n	8001c60 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c4c:	f7ff f91e 	bl	8000e8c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c5a:	d901      	bls.n	8001c60 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e01f      	b.n	8001ca0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6c:	d1ee      	bne.n	8001c4c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c74:	f7ff f90a 	bl	8000e8c <HAL_GetTick>
 8001c78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c7a:	e009      	b.n	8001c90 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c7c:	f7ff f906 	bl	8000e8c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c8a:	d901      	bls.n	8001c90 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e007      	b.n	8001ca0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c90:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c9c:	d1ee      	bne.n	8001c7c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	420e0040 	.word	0x420e0040
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	420e0044 	.word	0x420e0044

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0cc      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b68      	ldr	r3, [pc, #416]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d90c      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b65      	ldr	r3, [pc, #404]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b63      	ldr	r3, [pc, #396]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0b8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0c:	4b59      	ldr	r3, [pc, #356]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4a58      	ldr	r2, [pc, #352]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a52      	ldr	r2, [pc, #328]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b50      	ldr	r3, [pc, #320]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	494d      	ldr	r1, [pc, #308]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d044      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b47      	ldr	r3, [pc, #284]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d119      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e07f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d76:	4b3f      	ldr	r3, [pc, #252]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	4b3b      	ldr	r3, [pc, #236]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e067      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b37      	ldr	r3, [pc, #220]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4934      	ldr	r1, [pc, #208]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da8:	f7ff f870 	bl	8000e8c <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7ff f86c 	bl	8000e8c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e04f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d20c      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e032      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4916      	ldr	r1, [pc, #88]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2a:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	490e      	ldr	r1, [pc, #56]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e3e:	f000 f887 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	490a      	ldr	r1, [pc, #40]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	5ccb      	ldrb	r3, [r1, r3]
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fe60 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023c00 	.word	0x40023c00
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08005518 	.word	0x08005518
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e88:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000000 	.word	0x20000000

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ea0:	f7ff fff0 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0a9b      	lsrs	r3, r3, #10
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	@ (8001ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	08005528 	.word	0x08005528

08001ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ec8:	f7ff ffdc 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0b5b      	lsrs	r3, r3, #13
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08005528 	.word	0x08005528

08001eec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	220f      	movs	r2, #15
 8001efa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_RCC_GetClockConfig+0x5c>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0203 	and.w	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <HAL_RCC_GetClockConfig+0x5c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_RCC_GetClockConfig+0x5c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <HAL_RCC_GetClockConfig+0x60>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 020f 	and.w	r2, r3, #15
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f54:	b0ae      	sub	sp, #184	@ 0xb8
 8001f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f76:	4bcb      	ldr	r3, [pc, #812]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	f200 8206 	bhi.w	8002390 <HAL_RCC_GetSysClockFreq+0x440>
 8001f84:	a201      	add	r2, pc, #4	@ (adr r2, 8001f8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8a:	bf00      	nop
 8001f8c:	08001fc1 	.word	0x08001fc1
 8001f90:	08002391 	.word	0x08002391
 8001f94:	08002391 	.word	0x08002391
 8001f98:	08002391 	.word	0x08002391
 8001f9c:	08001fc9 	.word	0x08001fc9
 8001fa0:	08002391 	.word	0x08002391
 8001fa4:	08002391 	.word	0x08002391
 8001fa8:	08002391 	.word	0x08002391
 8001fac:	08001fd1 	.word	0x08001fd1
 8001fb0:	08002391 	.word	0x08002391
 8001fb4:	08002391 	.word	0x08002391
 8001fb8:	08002391 	.word	0x08002391
 8001fbc:	080021c1 	.word	0x080021c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4bb9      	ldr	r3, [pc, #740]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001fc6:	e1e7      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc8:	4bb8      	ldr	r3, [pc, #736]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fce:	e1e3      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd0:	4bb4      	ldr	r3, [pc, #720]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fdc:	4bb1      	ldr	r3, [pc, #708]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d071      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe8:	4bae      	ldr	r3, [pc, #696]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ff4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002000:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800200a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800200e:	4622      	mov	r2, r4
 8002010:	462b      	mov	r3, r5
 8002012:	f04f 0000 	mov.w	r0, #0
 8002016:	f04f 0100 	mov.w	r1, #0
 800201a:	0159      	lsls	r1, r3, #5
 800201c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002020:	0150      	lsls	r0, r2, #5
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4621      	mov	r1, r4
 8002028:	1a51      	subs	r1, r2, r1
 800202a:	6439      	str	r1, [r7, #64]	@ 0x40
 800202c:	4629      	mov	r1, r5
 800202e:	eb63 0301 	sbc.w	r3, r3, r1
 8002032:	647b      	str	r3, [r7, #68]	@ 0x44
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002040:	4649      	mov	r1, r9
 8002042:	018b      	lsls	r3, r1, #6
 8002044:	4641      	mov	r1, r8
 8002046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800204a:	4641      	mov	r1, r8
 800204c:	018a      	lsls	r2, r1, #6
 800204e:	4641      	mov	r1, r8
 8002050:	1a51      	subs	r1, r2, r1
 8002052:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002054:	4649      	mov	r1, r9
 8002056:	eb63 0301 	sbc.w	r3, r3, r1
 800205a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002068:	4649      	mov	r1, r9
 800206a:	00cb      	lsls	r3, r1, #3
 800206c:	4641      	mov	r1, r8
 800206e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002072:	4641      	mov	r1, r8
 8002074:	00ca      	lsls	r2, r1, #3
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	4603      	mov	r3, r0
 800207c:	4622      	mov	r2, r4
 800207e:	189b      	adds	r3, r3, r2
 8002080:	633b      	str	r3, [r7, #48]	@ 0x30
 8002082:	462b      	mov	r3, r5
 8002084:	460a      	mov	r2, r1
 8002086:	eb42 0303 	adc.w	r3, r2, r3
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002098:	4629      	mov	r1, r5
 800209a:	024b      	lsls	r3, r1, #9
 800209c:	4621      	mov	r1, r4
 800209e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020a2:	4621      	mov	r1, r4
 80020a4:	024a      	lsls	r2, r1, #9
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ae:	2200      	movs	r2, #0
 80020b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020bc:	f7fe f900 	bl	80002c0 <__aeabi_uldivmod>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4613      	mov	r3, r2
 80020c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020ca:	e067      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020cc:	4b75      	ldr	r3, [pc, #468]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	2200      	movs	r2, #0
 80020d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020d8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020e6:	2300      	movs	r3, #0
 80020e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020ee:	4622      	mov	r2, r4
 80020f0:	462b      	mov	r3, r5
 80020f2:	f04f 0000 	mov.w	r0, #0
 80020f6:	f04f 0100 	mov.w	r1, #0
 80020fa:	0159      	lsls	r1, r3, #5
 80020fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002100:	0150      	lsls	r0, r2, #5
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4621      	mov	r1, r4
 8002108:	1a51      	subs	r1, r2, r1
 800210a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800210c:	4629      	mov	r1, r5
 800210e:	eb63 0301 	sbc.w	r3, r3, r1
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002120:	4649      	mov	r1, r9
 8002122:	018b      	lsls	r3, r1, #6
 8002124:	4641      	mov	r1, r8
 8002126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800212a:	4641      	mov	r1, r8
 800212c:	018a      	lsls	r2, r1, #6
 800212e:	4641      	mov	r1, r8
 8002130:	ebb2 0a01 	subs.w	sl, r2, r1
 8002134:	4649      	mov	r1, r9
 8002136:	eb63 0b01 	sbc.w	fp, r3, r1
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002146:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800214a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800214e:	4692      	mov	sl, r2
 8002150:	469b      	mov	fp, r3
 8002152:	4623      	mov	r3, r4
 8002154:	eb1a 0303 	adds.w	r3, sl, r3
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	462b      	mov	r3, r5
 800215c:	eb4b 0303 	adc.w	r3, fp, r3
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800216e:	4629      	mov	r1, r5
 8002170:	028b      	lsls	r3, r1, #10
 8002172:	4621      	mov	r1, r4
 8002174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002178:	4621      	mov	r1, r4
 800217a:	028a      	lsls	r2, r1, #10
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002184:	2200      	movs	r2, #0
 8002186:	673b      	str	r3, [r7, #112]	@ 0x70
 8002188:	677a      	str	r2, [r7, #116]	@ 0x74
 800218a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800218e:	f7fe f897 	bl	80002c0 <__aeabi_uldivmod>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4613      	mov	r3, r2
 8002198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800219c:	4b41      	ldr	r3, [pc, #260]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	3301      	adds	r3, #1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80021ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021be:	e0eb      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c0:	4b38      	ldr	r3, [pc, #224]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021cc:	4b35      	ldr	r3, [pc, #212]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d06b      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d8:	4b32      	ldr	r3, [pc, #200]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	2200      	movs	r2, #0
 80021e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80021ec:	2300      	movs	r3, #0
 80021ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80021f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021f4:	4622      	mov	r2, r4
 80021f6:	462b      	mov	r3, r5
 80021f8:	f04f 0000 	mov.w	r0, #0
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	0159      	lsls	r1, r3, #5
 8002202:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002206:	0150      	lsls	r0, r2, #5
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4621      	mov	r1, r4
 800220e:	1a51      	subs	r1, r2, r1
 8002210:	61b9      	str	r1, [r7, #24]
 8002212:	4629      	mov	r1, r5
 8002214:	eb63 0301 	sbc.w	r3, r3, r1
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002226:	4659      	mov	r1, fp
 8002228:	018b      	lsls	r3, r1, #6
 800222a:	4651      	mov	r1, sl
 800222c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002230:	4651      	mov	r1, sl
 8002232:	018a      	lsls	r2, r1, #6
 8002234:	4651      	mov	r1, sl
 8002236:	ebb2 0801 	subs.w	r8, r2, r1
 800223a:	4659      	mov	r1, fp
 800223c:	eb63 0901 	sbc.w	r9, r3, r1
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800224c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002250:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002254:	4690      	mov	r8, r2
 8002256:	4699      	mov	r9, r3
 8002258:	4623      	mov	r3, r4
 800225a:	eb18 0303 	adds.w	r3, r8, r3
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	462b      	mov	r3, r5
 8002262:	eb49 0303 	adc.w	r3, r9, r3
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002274:	4629      	mov	r1, r5
 8002276:	024b      	lsls	r3, r1, #9
 8002278:	4621      	mov	r1, r4
 800227a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800227e:	4621      	mov	r1, r4
 8002280:	024a      	lsls	r2, r1, #9
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800228a:	2200      	movs	r2, #0
 800228c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800228e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002290:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002294:	f7fe f814 	bl	80002c0 <__aeabi_uldivmod>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4613      	mov	r3, r2
 800229e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022a2:	e065      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x420>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b0:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	2200      	movs	r2, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	4611      	mov	r1, r2
 80022bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80022c2:	2300      	movs	r3, #0
 80022c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80022c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022ca:	4642      	mov	r2, r8
 80022cc:	464b      	mov	r3, r9
 80022ce:	f04f 0000 	mov.w	r0, #0
 80022d2:	f04f 0100 	mov.w	r1, #0
 80022d6:	0159      	lsls	r1, r3, #5
 80022d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022dc:	0150      	lsls	r0, r2, #5
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4641      	mov	r1, r8
 80022e4:	1a51      	subs	r1, r2, r1
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	4649      	mov	r1, r9
 80022ea:	eb63 0301 	sbc.w	r3, r3, r1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022fc:	4659      	mov	r1, fp
 80022fe:	018b      	lsls	r3, r1, #6
 8002300:	4651      	mov	r1, sl
 8002302:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002306:	4651      	mov	r1, sl
 8002308:	018a      	lsls	r2, r1, #6
 800230a:	4651      	mov	r1, sl
 800230c:	1a54      	subs	r4, r2, r1
 800230e:	4659      	mov	r1, fp
 8002310:	eb63 0501 	sbc.w	r5, r3, r1
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	00eb      	lsls	r3, r5, #3
 800231e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002322:	00e2      	lsls	r2, r4, #3
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	4643      	mov	r3, r8
 800232a:	18e3      	adds	r3, r4, r3
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	464b      	mov	r3, r9
 8002330:	eb45 0303 	adc.w	r3, r5, r3
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002342:	4629      	mov	r1, r5
 8002344:	028b      	lsls	r3, r1, #10
 8002346:	4621      	mov	r1, r4
 8002348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800234c:	4621      	mov	r1, r4
 800234e:	028a      	lsls	r2, r1, #10
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002358:	2200      	movs	r2, #0
 800235a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800235c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800235e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002362:	f7fd ffad 	bl	80002c0 <__aeabi_uldivmod>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4613      	mov	r3, r2
 800236c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002370:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	0f1b      	lsrs	r3, r3, #28
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800237e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800238e:	e003      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002390:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8002392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002396:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002398:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800239c:	4618      	mov	r0, r3
 800239e:	37b8      	adds	r7, #184	@ 0xb8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400

080023b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e28d      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8083 	beq.w	80024d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023d0:	4b94      	ldr	r3, [pc, #592]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d019      	beq.n	8002410 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023dc:	4b91      	ldr	r3, [pc, #580]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f4:	d00c      	beq.n	8002410 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d112      	bne.n	8002428 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002402:	4b88      	ldr	r3, [pc, #544]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800240e:	d10b      	bne.n	8002428 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	4b84      	ldr	r3, [pc, #528]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d05b      	beq.n	80024d4 <HAL_RCC_OscConfig+0x124>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d157      	bne.n	80024d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e25a      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002430:	d106      	bne.n	8002440 <HAL_RCC_OscConfig+0x90>
 8002432:	4b7c      	ldr	r3, [pc, #496]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a7b      	ldr	r2, [pc, #492]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e01d      	b.n	800247c <HAL_RCC_OscConfig+0xcc>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0xb4>
 800244a:	4b76      	ldr	r3, [pc, #472]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a75      	ldr	r2, [pc, #468]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b73      	ldr	r3, [pc, #460]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a72      	ldr	r2, [pc, #456]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0xcc>
 8002464:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a6e      	ldr	r2, [pc, #440]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 800246a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b6c      	ldr	r3, [pc, #432]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6b      	ldr	r2, [pc, #428]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800247a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fd02 	bl	8000e8c <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7fe fcfe 	bl	8000e8c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	@ 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e21f      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b61      	ldr	r3, [pc, #388]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0xdc>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fcee 	bl	8000e8c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fcea 	bl	8000e8c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	@ 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e20b      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	4b57      	ldr	r3, [pc, #348]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x104>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d06f      	beq.n	80025c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024e2:	4b50      	ldr	r3, [pc, #320]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d017      	beq.n	800251e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d105      	bne.n	8002506 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002506:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d11c      	bne.n	800254c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b44      	ldr	r3, [pc, #272]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x186>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1d3      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b3b      	ldr	r3, [pc, #236]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4937      	ldr	r1, [pc, #220]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e03a      	b.n	80025c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b34      	ldr	r3, [pc, #208]	@ (8002628 <HAL_RCC_OscConfig+0x278>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe fc97 	bl	8000e8c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe fc93 	bl	8000e8c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e1b4      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4925      	ldr	r1, [pc, #148]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <HAL_RCC_OscConfig+0x278>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fc76 	bl	8000e8c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe fc72 	bl	8000e8c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e193      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d036      	beq.n	800263c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d016      	beq.n	8002604 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_RCC_OscConfig+0x27c>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe fc56 	bl	8000e8c <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe fc52 	bl	8000e8c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e173      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_RCC_OscConfig+0x274>)
 80025f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x234>
 8002602:	e01b      	b.n	800263c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002604:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_RCC_OscConfig+0x27c>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fc3f 	bl	8000e8c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	e00e      	b.n	8002630 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe fc3b 	bl	8000e8c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d907      	bls.n	8002630 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e15c      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
 8002624:	40023800 	.word	0x40023800
 8002628:	42470000 	.word	0x42470000
 800262c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b8a      	ldr	r3, [pc, #552]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ea      	bne.n	8002612 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8097 	beq.w	8002778 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b83      	ldr	r3, [pc, #524]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	4b7f      	ldr	r3, [pc, #508]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	4a7e      	ldr	r2, [pc, #504]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	@ 0x40
 800266a:	4b7c      	ldr	r3, [pc, #496]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b79      	ldr	r3, [pc, #484]	@ (8002860 <HAL_RCC_OscConfig+0x4b0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b76      	ldr	r3, [pc, #472]	@ (8002860 <HAL_RCC_OscConfig+0x4b0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a75      	ldr	r2, [pc, #468]	@ (8002860 <HAL_RCC_OscConfig+0x4b0>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe fbfb 	bl	8000e8c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe fbf7 	bl	8000e8c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e118      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002860 <HAL_RCC_OscConfig+0x4b0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x31e>
 80026c0:	4b66      	ldr	r3, [pc, #408]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c4:	4a65      	ldr	r2, [pc, #404]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x358>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x340>
 80026d6:	4b61      	ldr	r3, [pc, #388]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	4a60      	ldr	r2, [pc, #384]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e2:	4b5e      	ldr	r3, [pc, #376]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	4a5d      	ldr	r2, [pc, #372]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0x358>
 80026f0:	4b5a      	ldr	r3, [pc, #360]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f4:	4a59      	ldr	r2, [pc, #356]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fc:	4b57      	ldr	r3, [pc, #348]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	4a56      	ldr	r2, [pc, #344]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002702:	f023 0304 	bic.w	r3, r3, #4
 8002706:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe fbbc 	bl	8000e8c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe fbb8 	bl	8000e8c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0d7      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	4b4b      	ldr	r3, [pc, #300]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ee      	beq.n	8002718 <HAL_RCC_OscConfig+0x368>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fba6 	bl	8000e8c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe fba2 	bl	8000e8c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0c1      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	4b40      	ldr	r3, [pc, #256]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ee      	bne.n	8002744 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276c:	4b3b      	ldr	r3, [pc, #236]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	4a3a      	ldr	r2, [pc, #232]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80ad 	beq.w	80028dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002782:	4b36      	ldr	r3, [pc, #216]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b08      	cmp	r3, #8
 800278c:	d060      	beq.n	8002850 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d145      	bne.n	8002822 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b33      	ldr	r3, [pc, #204]	@ (8002864 <HAL_RCC_OscConfig+0x4b4>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fb76 	bl	8000e8c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe fb72 	bl	8000e8c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e093      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	4b29      	ldr	r3, [pc, #164]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	3b01      	subs	r3, #1
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	071b      	lsls	r3, r3, #28
 80027ee:	491b      	ldr	r1, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <HAL_RCC_OscConfig+0x4b4>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe fb47 	bl	8000e8c <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe fb43 	bl	8000e8c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e064      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002814:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x452>
 8002820:	e05c      	b.n	80028dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <HAL_RCC_OscConfig+0x4b4>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fb30 	bl	8000e8c <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe fb2c 	bl	8000e8c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e04d      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCC_OscConfig+0x4ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x480>
 800284e:	e045      	b.n	80028dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d107      	bne.n	8002868 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e040      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000
 8002864:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002868:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <HAL_RCC_OscConfig+0x538>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d030      	beq.n	80028d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d129      	bne.n	80028d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d122      	bne.n	80028d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002898:	4013      	ands	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800289e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d119      	bne.n	80028d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	3b01      	subs	r3, #1
 80028b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d10f      	bne.n	80028d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f839 	bl	800298a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 f9c0 	bl	8002cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d001      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e04e      	b.n	8002a56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a23      	ldr	r2, [pc, #140]	@ (8002a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d022      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x80>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e2:	d01d      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x80>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d018      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x80>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d013      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x80>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00e      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x80>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1b      	ldr	r2, [pc, #108]	@ (8002a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x80>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a19      	ldr	r2, [pc, #100]	@ (8002a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x80>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d111      	bne.n	8002a44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d010      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	e007      	b.n	8002a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40010400 	.word	0x40010400
 8002a78:	40014000 	.word	0x40014000
 8002a7c:	40001800 	.word	0x40001800

08002a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d020      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0202 	mvn.w	r2, #2
 8002ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8d2 	bl	8002c74 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8c4 	bl	8002c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8d5 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d020      	beq.n	8002b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0204 	mvn.w	r2, #4
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8ac 	bl	8002c74 <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f89e 	bl	8002c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8af 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d020      	beq.n	8002b7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0208 	mvn.w	r2, #8
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2204      	movs	r2, #4
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f886 	bl	8002c74 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f878 	bl	8002c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f889 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d020      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01b      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0210 	mvn.w	r2, #16
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f860 	bl	8002c74 <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f852 	bl	8002c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f863 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0201 	mvn.w	r2, #1
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd ff58 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f906 	bl	8002e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00c      	beq.n	8002c34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f834 	bl	8002c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0220 	mvn.w	r2, #32
 8002c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8d8 	bl	8002e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a46      	ldr	r2, [pc, #280]	@ (8002ddc <TIM_Base_SetConfig+0x12c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <TIM_Base_SetConfig+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cce:	d00f      	beq.n	8002cf0 <TIM_Base_SetConfig+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a43      	ldr	r2, [pc, #268]	@ (8002de0 <TIM_Base_SetConfig+0x130>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00b      	beq.n	8002cf0 <TIM_Base_SetConfig+0x40>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a42      	ldr	r2, [pc, #264]	@ (8002de4 <TIM_Base_SetConfig+0x134>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <TIM_Base_SetConfig+0x40>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a41      	ldr	r2, [pc, #260]	@ (8002de8 <TIM_Base_SetConfig+0x138>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <TIM_Base_SetConfig+0x40>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a40      	ldr	r2, [pc, #256]	@ (8002dec <TIM_Base_SetConfig+0x13c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d108      	bne.n	8002d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a35      	ldr	r2, [pc, #212]	@ (8002ddc <TIM_Base_SetConfig+0x12c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d02b      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d10:	d027      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a32      	ldr	r2, [pc, #200]	@ (8002de0 <TIM_Base_SetConfig+0x130>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d023      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a31      	ldr	r2, [pc, #196]	@ (8002de4 <TIM_Base_SetConfig+0x134>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01f      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a30      	ldr	r2, [pc, #192]	@ (8002de8 <TIM_Base_SetConfig+0x138>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01b      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8002dec <TIM_Base_SetConfig+0x13c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d017      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2e      	ldr	r2, [pc, #184]	@ (8002df0 <TIM_Base_SetConfig+0x140>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002df4 <TIM_Base_SetConfig+0x144>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00f      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2c      	ldr	r2, [pc, #176]	@ (8002df8 <TIM_Base_SetConfig+0x148>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00b      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dfc <TIM_Base_SetConfig+0x14c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d007      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2a      	ldr	r2, [pc, #168]	@ (8002e00 <TIM_Base_SetConfig+0x150>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d003      	beq.n	8002d62 <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a29      	ldr	r2, [pc, #164]	@ (8002e04 <TIM_Base_SetConfig+0x154>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d108      	bne.n	8002d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a10      	ldr	r2, [pc, #64]	@ (8002ddc <TIM_Base_SetConfig+0x12c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_Base_SetConfig+0xf8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a12      	ldr	r2, [pc, #72]	@ (8002dec <TIM_Base_SetConfig+0x13c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d103      	bne.n	8002db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f023 0201 	bic.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	611a      	str	r2, [r3, #16]
  }
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800
 8002de8:	40000c00 	.word	0x40000c00
 8002dec:	40010400 	.word	0x40010400
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800
 8002dfc:	40001800 	.word	0x40001800
 8002e00:	40001c00 	.word	0x40001c00
 8002e04:	40002000 	.word	0x40002000

08002e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e042      	b.n	8002ec8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd ff70 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	@ 0x24
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f973 	bl	8003160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	@ 0x28
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d175      	bne.n	8002fdc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_UART_Transmit+0x2c>
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e06e      	b.n	8002fde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2221      	movs	r2, #33	@ 0x21
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0e:	f7fd ffbd 	bl	8000e8c <HAL_GetTick>
 8002f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f28:	d108      	bne.n	8002f3c <HAL_UART_Transmit+0x6c>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e003      	b.n	8002f44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f44:	e02e      	b.n	8002fa4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2180      	movs	r1, #128	@ 0x80
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f848 	bl	8002fe6 <UART_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e03a      	b.n	8002fde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3302      	adds	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e007      	b.n	8002f96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3301      	adds	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1cb      	bne.n	8002f46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2140      	movs	r1, #64	@ 0x40
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f814 	bl	8002fe6 <UART_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e006      	b.n	8002fde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e000      	b.n	8002fde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff6:	e03b      	b.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d037      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003000:	f7fd ff44 	bl	8000e8c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d302      	bcc.n	8003016 <UART_WaitOnFlagUntilTimeout+0x30>
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e03a      	b.n	8003090 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d023      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b80      	cmp	r3, #128	@ 0x80
 800302c:	d020      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d01d      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b08      	cmp	r3, #8
 8003040:	d116      	bne.n	8003070 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f81d 	bl	8003098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2208      	movs	r2, #8
 8003062:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e00f      	b.n	8003090 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	429a      	cmp	r2, r3
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	429a      	cmp	r2, r3
 800308c:	d0b4      	beq.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003098:	b480      	push	{r7}
 800309a:	b095      	sub	sp, #84	@ 0x54
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80030c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e5      	bne.n	80030a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3314      	adds	r3, #20
 80030da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3314      	adds	r3, #20
 80030f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e5      	bne.n	80030d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	2b01      	cmp	r3, #1
 800310e:	d119      	bne.n	8003144 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	e853 3f00 	ldrex	r3, [r3]
 800311e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f023 0310 	bic.w	r3, r3, #16
 8003126:	647b      	str	r3, [r7, #68]	@ 0x44
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003130:	61ba      	str	r2, [r7, #24]
 8003132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	6979      	ldr	r1, [r7, #20]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	613b      	str	r3, [r7, #16]
   return(result);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e5      	bne.n	8003110 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003152:	bf00      	nop
 8003154:	3754      	adds	r7, #84	@ 0x54
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b0c0      	sub	sp, #256	@ 0x100
 8003166:	af00      	add	r7, sp, #0
 8003168:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	ea40 0301 	orr.w	r3, r0, r1
 8003188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	431a      	orrs	r2, r3
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	431a      	orrs	r2, r3
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031b8:	f021 010c 	bic.w	r1, r1, #12
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031c6:	430b      	orrs	r3, r1
 80031c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	6999      	ldr	r1, [r3, #24]
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	ea40 0301 	orr.w	r3, r0, r1
 80031e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b8f      	ldr	r3, [pc, #572]	@ (800342c <UART_SetConfig+0x2cc>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d005      	beq.n	8003200 <UART_SetConfig+0xa0>
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003430 <UART_SetConfig+0x2d0>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d104      	bne.n	800320a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7fe fe60 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8003204:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003208:	e003      	b.n	8003212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320a:	f7fe fe47 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 800320e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321c:	f040 810c 	bne.w	8003438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800322a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800322e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003232:	4622      	mov	r2, r4
 8003234:	462b      	mov	r3, r5
 8003236:	1891      	adds	r1, r2, r2
 8003238:	65b9      	str	r1, [r7, #88]	@ 0x58
 800323a:	415b      	adcs	r3, r3
 800323c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800323e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003242:	4621      	mov	r1, r4
 8003244:	eb12 0801 	adds.w	r8, r2, r1
 8003248:	4629      	mov	r1, r5
 800324a:	eb43 0901 	adc.w	r9, r3, r1
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	4623      	mov	r3, r4
 8003268:	eb18 0303 	adds.w	r3, r8, r3
 800326c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003270:	462b      	mov	r3, r5
 8003272:	eb49 0303 	adc.w	r3, r9, r3
 8003276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003286:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800328a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800328e:	460b      	mov	r3, r1
 8003290:	18db      	adds	r3, r3, r3
 8003292:	653b      	str	r3, [r7, #80]	@ 0x50
 8003294:	4613      	mov	r3, r2
 8003296:	eb42 0303 	adc.w	r3, r2, r3
 800329a:	657b      	str	r3, [r7, #84]	@ 0x54
 800329c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032a4:	f7fd f80c 	bl	80002c0 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4b61      	ldr	r3, [pc, #388]	@ (8003434 <UART_SetConfig+0x2d4>)
 80032ae:	fba3 2302 	umull	r2, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	011c      	lsls	r4, r3, #4
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032d0:	415b      	adcs	r3, r3
 80032d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032d8:	4641      	mov	r1, r8
 80032da:	eb12 0a01 	adds.w	sl, r2, r1
 80032de:	4649      	mov	r1, r9
 80032e0:	eb43 0b01 	adc.w	fp, r3, r1
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f8:	4692      	mov	sl, r2
 80032fa:	469b      	mov	fp, r3
 80032fc:	4643      	mov	r3, r8
 80032fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003306:	464b      	mov	r3, r9
 8003308:	eb4b 0303 	adc.w	r3, fp, r3
 800330c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800331c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003324:	460b      	mov	r3, r1
 8003326:	18db      	adds	r3, r3, r3
 8003328:	643b      	str	r3, [r7, #64]	@ 0x40
 800332a:	4613      	mov	r3, r2
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	647b      	str	r3, [r7, #68]	@ 0x44
 8003332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800333a:	f7fc ffc1 	bl	80002c0 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4611      	mov	r1, r2
 8003344:	4b3b      	ldr	r3, [pc, #236]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003346:	fba3 2301 	umull	r2, r3, r3, r1
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2264      	movs	r2, #100	@ 0x64
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	1acb      	subs	r3, r1, r3
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800335a:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <UART_SetConfig+0x2d4>)
 800335c:	fba3 2302 	umull	r2, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003368:	441c      	add	r4, r3
 800336a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003374:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800337c:	4642      	mov	r2, r8
 800337e:	464b      	mov	r3, r9
 8003380:	1891      	adds	r1, r2, r2
 8003382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003384:	415b      	adcs	r3, r3
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800338c:	4641      	mov	r1, r8
 800338e:	1851      	adds	r1, r2, r1
 8003390:	6339      	str	r1, [r7, #48]	@ 0x30
 8003392:	4649      	mov	r1, r9
 8003394:	414b      	adcs	r3, r1
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033a4:	4659      	mov	r1, fp
 80033a6:	00cb      	lsls	r3, r1, #3
 80033a8:	4651      	mov	r1, sl
 80033aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ae:	4651      	mov	r1, sl
 80033b0:	00ca      	lsls	r2, r1, #3
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	4642      	mov	r2, r8
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033c0:	464b      	mov	r3, r9
 80033c2:	460a      	mov	r2, r1
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033e0:	460b      	mov	r3, r1
 80033e2:	18db      	adds	r3, r3, r3
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033e6:	4613      	mov	r3, r2
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033f6:	f7fc ff63 	bl	80002c0 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003400:	fba3 1302 	umull	r1, r3, r3, r2
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	2164      	movs	r1, #100	@ 0x64
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	3332      	adds	r3, #50	@ 0x32
 8003412:	4a08      	ldr	r2, [pc, #32]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	f003 0207 	and.w	r2, r3, #7
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4422      	add	r2, r4
 8003426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003428:	e106      	b.n	8003638 <UART_SetConfig+0x4d8>
 800342a:	bf00      	nop
 800342c:	40011000 	.word	0x40011000
 8003430:	40011400 	.word	0x40011400
 8003434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003442:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800344a:	4642      	mov	r2, r8
 800344c:	464b      	mov	r3, r9
 800344e:	1891      	adds	r1, r2, r2
 8003450:	6239      	str	r1, [r7, #32]
 8003452:	415b      	adcs	r3, r3
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
 8003456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800345a:	4641      	mov	r1, r8
 800345c:	1854      	adds	r4, r2, r1
 800345e:	4649      	mov	r1, r9
 8003460:	eb43 0501 	adc.w	r5, r3, r1
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	00eb      	lsls	r3, r5, #3
 800346e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003472:	00e2      	lsls	r2, r4, #3
 8003474:	4614      	mov	r4, r2
 8003476:	461d      	mov	r5, r3
 8003478:	4643      	mov	r3, r8
 800347a:	18e3      	adds	r3, r4, r3
 800347c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003480:	464b      	mov	r3, r9
 8003482:	eb45 0303 	adc.w	r3, r5, r3
 8003486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034a6:	4629      	mov	r1, r5
 80034a8:	008b      	lsls	r3, r1, #2
 80034aa:	4621      	mov	r1, r4
 80034ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b0:	4621      	mov	r1, r4
 80034b2:	008a      	lsls	r2, r1, #2
 80034b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034b8:	f7fc ff02 	bl	80002c0 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4b60      	ldr	r3, [pc, #384]	@ (8003644 <UART_SetConfig+0x4e4>)
 80034c2:	fba3 2302 	umull	r2, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	011c      	lsls	r4, r3, #4
 80034ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	1891      	adds	r1, r2, r2
 80034e2:	61b9      	str	r1, [r7, #24]
 80034e4:	415b      	adcs	r3, r3
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ec:	4641      	mov	r1, r8
 80034ee:	1851      	adds	r1, r2, r1
 80034f0:	6139      	str	r1, [r7, #16]
 80034f2:	4649      	mov	r1, r9
 80034f4:	414b      	adcs	r3, r1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003504:	4659      	mov	r1, fp
 8003506:	00cb      	lsls	r3, r1, #3
 8003508:	4651      	mov	r1, sl
 800350a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350e:	4651      	mov	r1, sl
 8003510:	00ca      	lsls	r2, r1, #3
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	4603      	mov	r3, r0
 8003518:	4642      	mov	r2, r8
 800351a:	189b      	adds	r3, r3, r2
 800351c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003520:	464b      	mov	r3, r9
 8003522:	460a      	mov	r2, r1
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003536:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003544:	4649      	mov	r1, r9
 8003546:	008b      	lsls	r3, r1, #2
 8003548:	4641      	mov	r1, r8
 800354a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800354e:	4641      	mov	r1, r8
 8003550:	008a      	lsls	r2, r1, #2
 8003552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003556:	f7fc feb3 	bl	80002c0 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4611      	mov	r1, r2
 8003560:	4b38      	ldr	r3, [pc, #224]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003562:	fba3 2301 	umull	r2, r3, r3, r1
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2264      	movs	r2, #100	@ 0x64
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	1acb      	subs	r3, r1, r3
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	3332      	adds	r3, #50	@ 0x32
 8003574:	4a33      	ldr	r2, [pc, #204]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003580:	441c      	add	r4, r3
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003586:	2200      	movs	r2, #0
 8003588:	673b      	str	r3, [r7, #112]	@ 0x70
 800358a:	677a      	str	r2, [r7, #116]	@ 0x74
 800358c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003590:	4642      	mov	r2, r8
 8003592:	464b      	mov	r3, r9
 8003594:	1891      	adds	r1, r2, r2
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	415b      	adcs	r3, r3
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a0:	4641      	mov	r1, r8
 80035a2:	1851      	adds	r1, r2, r1
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	4649      	mov	r1, r9
 80035a8:	414b      	adcs	r3, r1
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035b8:	4659      	mov	r1, fp
 80035ba:	00cb      	lsls	r3, r1, #3
 80035bc:	4651      	mov	r1, sl
 80035be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c2:	4651      	mov	r1, sl
 80035c4:	00ca      	lsls	r2, r1, #3
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	4642      	mov	r2, r8
 80035ce:	189b      	adds	r3, r3, r2
 80035d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035d2:	464b      	mov	r3, r9
 80035d4:	460a      	mov	r2, r1
 80035d6:	eb42 0303 	adc.w	r3, r2, r3
 80035da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035f4:	4649      	mov	r1, r9
 80035f6:	008b      	lsls	r3, r1, #2
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fe:	4641      	mov	r1, r8
 8003600:	008a      	lsls	r2, r1, #2
 8003602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003606:	f7fc fe5b 	bl	80002c0 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	@ 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	3332      	adds	r3, #50	@ 0x32
 8003622:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4422      	add	r2, r4
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800363e:	46bd      	mov	sp, r7
 8003640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003644:	51eb851f 	.word	0x51eb851f

08003648 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365a:	2b84      	cmp	r3, #132	@ 0x84
 800365c:	d005      	beq.n	800366a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800365e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4413      	add	r3, r2
 8003666:	3303      	adds	r3, #3
 8003668:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800366a:	68fb      	ldr	r3, [r7, #12]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800367c:	f000 fae4 	bl	8003c48 <vTaskStartScheduler>
  
  return osOK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	bd80      	pop	{r7, pc}

08003686 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003688:	b089      	sub	sp, #36	@ 0x24
 800368a:	af04      	add	r7, sp, #16
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <osThreadCreate+0x54>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01c      	beq.n	80036da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685c      	ldr	r4, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691e      	ldr	r6, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ffc8 	bl	8003648 <makeFreeRtosPriority>
 80036b8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036c2:	9202      	str	r2, [sp, #8]
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	9100      	str	r1, [sp, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4632      	mov	r2, r6
 80036cc:	4629      	mov	r1, r5
 80036ce:	4620      	mov	r0, r4
 80036d0:	f000 f8ed 	bl	80038ae <xTaskCreateStatic>
 80036d4:	4603      	mov	r3, r0
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e01c      	b.n	8003714 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685c      	ldr	r4, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036e6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ffaa 	bl	8003648 <makeFreeRtosPriority>
 80036f4:	4602      	mov	r2, r0
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	9200      	str	r2, [sp, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	4632      	mov	r2, r6
 8003702:	4629      	mov	r1, r5
 8003704:	4620      	mov	r0, r4
 8003706:	f000 f932 	bl	800396e <xTaskCreate>
 800370a:	4603      	mov	r3, r0
 800370c:	2b01      	cmp	r3, #1
 800370e:	d001      	beq.n	8003714 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003714:	68fb      	ldr	r3, [r7, #12]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800371e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <osDelay+0x16>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	e000      	b.n	8003736 <osDelay+0x18>
 8003734:	2301      	movs	r3, #1
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fa50 	bl	8003bdc <vTaskDelay>
  
  return osOK;
 800373c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f103 0208 	add.w	r2, r3, #8
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f04f 32ff 	mov.w	r2, #4294967295
 800375e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 0208 	add.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 0208 	add.w	r2, r3, #8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	601a      	str	r2, [r3, #0]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d103      	bne.n	8003808 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e00c      	b.n	8003822 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3308      	adds	r3, #8
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e002      	b.n	8003816 <vListInsert+0x2e>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	429a      	cmp	r2, r3
 8003820:	d2f6      	bcs.n	8003810 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6892      	ldr	r2, [r2, #8]
 8003870:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6852      	ldr	r2, [r2, #4]
 800387a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	d103      	bne.n	800388e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1e5a      	subs	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b08e      	sub	sp, #56	@ 0x38
 80038b2:	af04      	add	r7, sp, #16
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	e7fd      	b.n	80038d6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10b      	bne.n	80038f8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	61fb      	str	r3, [r7, #28]
}
 80038f2:	bf00      	nop
 80038f4:	bf00      	nop
 80038f6:	e7fd      	b.n	80038f4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038f8:	2354      	movs	r3, #84	@ 0x54
 80038fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b54      	cmp	r3, #84	@ 0x54
 8003900:	d00b      	beq.n	800391a <xTaskCreateStatic+0x6c>
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	61bb      	str	r3, [r7, #24]
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	e7fd      	b.n	8003916 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800391a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800391c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01e      	beq.n	8003960 <xTaskCreateStatic+0xb2>
 8003922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01b      	beq.n	8003960 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	2202      	movs	r2, #2
 8003936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800393a:	2300      	movs	r3, #0
 800393c:	9303      	str	r3, [sp, #12]
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	f107 0314 	add.w	r3, r7, #20
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f850 	bl	80039f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800395a:	f000 f8d5 	bl	8003b08 <prvAddNewTaskToReadyList>
 800395e:	e001      	b.n	8003964 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003964:	697b      	ldr	r3, [r7, #20]
	}
 8003966:	4618      	mov	r0, r3
 8003968:	3728      	adds	r7, #40	@ 0x28
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800396e:	b580      	push	{r7, lr}
 8003970:	b08c      	sub	sp, #48	@ 0x30
 8003972:	af04      	add	r7, sp, #16
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fed0 	bl	8004728 <pvPortMalloc>
 8003988:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00e      	beq.n	80039ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003990:	2054      	movs	r0, #84	@ 0x54
 8003992:	f000 fec9 	bl	8004728 <pvPortMalloc>
 8003996:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80039a4:	e005      	b.n	80039b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039a6:	6978      	ldr	r0, [r7, #20]
 80039a8:	f000 ff8c 	bl	80048c4 <vPortFree>
 80039ac:	e001      	b.n	80039b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d017      	beq.n	80039e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9303      	str	r3, [sp, #12]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	9302      	str	r3, [sp, #8]
 80039ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f80e 	bl	80039f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039dc:	69f8      	ldr	r0, [r7, #28]
 80039de:	f000 f893 	bl	8003b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039e2:	2301      	movs	r3, #1
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e002      	b.n	80039ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039ee:	69bb      	ldr	r3, [r7, #24]
	}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a10:	3b01      	subs	r3, #1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f023 0307 	bic.w	r3, r3, #7
 8003a1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	617b      	str	r3, [r7, #20]
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	e7fd      	b.n	8003a3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01f      	beq.n	8003a88 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	e012      	b.n	8003a74 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	7819      	ldrb	r1, [r3, #0]
 8003a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3334      	adds	r3, #52	@ 0x34
 8003a5e:	460a      	mov	r2, r1
 8003a60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3301      	adds	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b0f      	cmp	r3, #15
 8003a78:	d9e9      	bls.n	8003a4e <prvInitialiseNewTask+0x56>
 8003a7a:	e000      	b.n	8003a7e <prvInitialiseNewTask+0x86>
			{
				break;
 8003a7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a86:	e003      	b.n	8003a90 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d901      	bls.n	8003a9a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a96:	2306      	movs	r3, #6
 8003a98:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fe68 	bl	8003786 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab8:	3318      	adds	r3, #24
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fe63 	bl	8003786 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	f1c3 0207 	rsb	r2, r3, #7
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	2200      	movs	r2, #0
 8003ada:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	69b8      	ldr	r0, [r7, #24]
 8003aea:	f000 fc0d 	bl	8004308 <pxPortInitialiseStack>
 8003aee:	4602      	mov	r2, r0
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003afe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b00:	bf00      	nop
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b10:	f000 fd2a 	bl	8004568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b14:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc0 <prvAddNewTaskToReadyList+0xb8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	4a29      	ldr	r2, [pc, #164]	@ (8003bc0 <prvAddNewTaskToReadyList+0xb8>)
 8003b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b1e:	4b29      	ldr	r3, [pc, #164]	@ (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b26:	4a27      	ldr	r2, [pc, #156]	@ (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b2c:	4b24      	ldr	r3, [pc, #144]	@ (8003bc0 <prvAddNewTaskToReadyList+0xb8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d110      	bne.n	8003b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b34:	f000 fac4 	bl	80040c0 <prvInitialiseTaskLists>
 8003b38:	e00d      	b.n	8003b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b3a:	4b23      	ldr	r3, [pc, #140]	@ (8003bc8 <prvAddNewTaskToReadyList+0xc0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b42:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d802      	bhi.n	8003b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b50:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b56:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <prvAddNewTaskToReadyList+0xc4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bcc <prvAddNewTaskToReadyList+0xc4>)
 8003b5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	2201      	movs	r2, #1
 8003b66:	409a      	lsls	r2, r3
 8003b68:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <prvAddNewTaskToReadyList+0xc8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	4a18      	ldr	r2, [pc, #96]	@ (8003bd0 <prvAddNewTaskToReadyList+0xc8>)
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4a15      	ldr	r2, [pc, #84]	@ (8003bd4 <prvAddNewTaskToReadyList+0xcc>)
 8003b80:	441a      	add	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f7ff fe09 	bl	80037a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b8e:	f000 fd1d 	bl	80045cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b92:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <prvAddNewTaskToReadyList+0xc0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00e      	beq.n	8003bb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d207      	bcs.n	8003bb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <prvAddNewTaskToReadyList+0xd0>)
 8003baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	200004bc 	.word	0x200004bc
 8003bc4:	200003bc 	.word	0x200003bc
 8003bc8:	200004c8 	.word	0x200004c8
 8003bcc:	200004d8 	.word	0x200004d8
 8003bd0:	200004c4 	.word	0x200004c4
 8003bd4:	200003c0 	.word	0x200003c0
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d018      	beq.n	8003c20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bee:	4b14      	ldr	r3, [pc, #80]	@ (8003c40 <vTaskDelay+0x64>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <vTaskDelay+0x32>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	60bb      	str	r3, [r7, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c0e:	f000 f87d 	bl	8003d0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c12:	2100      	movs	r1, #0
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fb11 	bl	800423c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c1a:	f000 f885 	bl	8003d28 <xTaskResumeAll>
 8003c1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003c26:	4b07      	ldr	r3, [pc, #28]	@ (8003c44 <vTaskDelay+0x68>)
 8003c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200004e4 	.word	0x200004e4
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	@ 0x28
 8003c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c56:	463a      	mov	r2, r7
 8003c58:	1d39      	adds	r1, r7, #4
 8003c5a:	f107 0308 	add.w	r3, r7, #8
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fd3c 	bl	80006dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	9202      	str	r2, [sp, #8]
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	2300      	movs	r3, #0
 8003c74:	460a      	mov	r2, r1
 8003c76:	491f      	ldr	r1, [pc, #124]	@ (8003cf4 <vTaskStartScheduler+0xac>)
 8003c78:	481f      	ldr	r0, [pc, #124]	@ (8003cf8 <vTaskStartScheduler+0xb0>)
 8003c7a:	f7ff fe18 	bl	80038ae <xTaskCreateStatic>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4a1e      	ldr	r2, [pc, #120]	@ (8003cfc <vTaskStartScheduler+0xb4>)
 8003c82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c84:	4b1d      	ldr	r3, [pc, #116]	@ (8003cfc <vTaskStartScheduler+0xb4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e001      	b.n	8003c96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d116      	bne.n	8003cca <vTaskStartScheduler+0x82>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	613b      	str	r3, [r7, #16]
}
 8003cae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cb0:	4b13      	ldr	r3, [pc, #76]	@ (8003d00 <vTaskStartScheduler+0xb8>)
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cb8:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <vTaskStartScheduler+0xbc>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cbe:	4b12      	ldr	r3, [pc, #72]	@ (8003d08 <vTaskStartScheduler+0xc0>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cc4:	f000 fbac 	bl	8004420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cc8:	e00f      	b.n	8003cea <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d10b      	bne.n	8003cea <vTaskStartScheduler+0xa2>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60fb      	str	r3, [r7, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <vTaskStartScheduler+0x9e>
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	08005510 	.word	0x08005510
 8003cf8:	08004091 	.word	0x08004091
 8003cfc:	200004e0 	.word	0x200004e0
 8003d00:	200004dc 	.word	0x200004dc
 8003d04:	200004c8 	.word	0x200004c8
 8003d08:	200004c0 	.word	0x200004c0

08003d0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d10:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <vTaskSuspendAll+0x18>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	4a03      	ldr	r2, [pc, #12]	@ (8003d24 <vTaskSuspendAll+0x18>)
 8003d18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	200004e4 	.word	0x200004e4

08003d28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d36:	4b42      	ldr	r3, [pc, #264]	@ (8003e40 <xTaskResumeAll+0x118>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <xTaskResumeAll+0x2e>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	603b      	str	r3, [r7, #0]
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d56:	f000 fc07 	bl	8004568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d5a:	4b39      	ldr	r3, [pc, #228]	@ (8003e40 <xTaskResumeAll+0x118>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	4a37      	ldr	r2, [pc, #220]	@ (8003e40 <xTaskResumeAll+0x118>)
 8003d62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d64:	4b36      	ldr	r3, [pc, #216]	@ (8003e40 <xTaskResumeAll+0x118>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d161      	bne.n	8003e30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d6c:	4b35      	ldr	r3, [pc, #212]	@ (8003e44 <xTaskResumeAll+0x11c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05d      	beq.n	8003e30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d74:	e02e      	b.n	8003dd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d76:	4b34      	ldr	r3, [pc, #208]	@ (8003e48 <xTaskResumeAll+0x120>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3318      	adds	r3, #24
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fd69 	bl	800385a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fd64 	bl	800385a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	2201      	movs	r2, #1
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003e4c <xTaskResumeAll+0x124>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e4c <xTaskResumeAll+0x124>)
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4a27      	ldr	r2, [pc, #156]	@ (8003e50 <xTaskResumeAll+0x128>)
 8003db2:	441a      	add	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f7ff fcf0 	bl	80037a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc4:	4b23      	ldr	r3, [pc, #140]	@ (8003e54 <xTaskResumeAll+0x12c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003dce:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <xTaskResumeAll+0x130>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <xTaskResumeAll+0x120>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1cc      	bne.n	8003d76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003de2:	f000 fa0b 	bl	80041fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003de6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <xTaskResumeAll+0x134>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d010      	beq.n	8003e14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003df2:	f000 f837 	bl	8003e64 <xTaskIncrementTick>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003dfc:	4b16      	ldr	r3, [pc, #88]	@ (8003e58 <xTaskResumeAll+0x130>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f1      	bne.n	8003df2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003e0e:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <xTaskResumeAll+0x134>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e14:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <xTaskResumeAll+0x130>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e20:	4b0f      	ldr	r3, [pc, #60]	@ (8003e60 <xTaskResumeAll+0x138>)
 8003e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e30:	f000 fbcc 	bl	80045cc <vPortExitCritical>

	return xAlreadyYielded;
 8003e34:	68bb      	ldr	r3, [r7, #8]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200004e4 	.word	0x200004e4
 8003e44:	200004bc 	.word	0x200004bc
 8003e48:	2000047c 	.word	0x2000047c
 8003e4c:	200004c4 	.word	0x200004c4
 8003e50:	200003c0 	.word	0x200003c0
 8003e54:	200003bc 	.word	0x200003bc
 8003e58:	200004d0 	.word	0x200004d0
 8003e5c:	200004cc 	.word	0x200004cc
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8003fac <xTaskIncrementTick+0x148>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 808f 	bne.w	8003f96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e78:	4b4d      	ldr	r3, [pc, #308]	@ (8003fb0 <xTaskIncrementTick+0x14c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e80:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb0 <xTaskIncrementTick+0x14c>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d121      	bne.n	8003ed0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e8c:	4b49      	ldr	r3, [pc, #292]	@ (8003fb4 <xTaskIncrementTick+0x150>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	603b      	str	r3, [r7, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	e7fd      	b.n	8003eaa <xTaskIncrementTick+0x46>
 8003eae:	4b41      	ldr	r3, [pc, #260]	@ (8003fb4 <xTaskIncrementTick+0x150>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	4b40      	ldr	r3, [pc, #256]	@ (8003fb8 <xTaskIncrementTick+0x154>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb4 <xTaskIncrementTick+0x150>)
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb8 <xTaskIncrementTick+0x154>)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fbc <xTaskIncrementTick+0x158>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fbc <xTaskIncrementTick+0x158>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	f000 f996 	bl	80041fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc0 <xTaskIncrementTick+0x15c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d348      	bcc.n	8003f6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eda:	4b36      	ldr	r3, [pc, #216]	@ (8003fb4 <xTaskIncrementTick+0x150>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee4:	4b36      	ldr	r3, [pc, #216]	@ (8003fc0 <xTaskIncrementTick+0x15c>)
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eea:	601a      	str	r2, [r3, #0]
					break;
 8003eec:	e03e      	b.n	8003f6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eee:	4b31      	ldr	r3, [pc, #196]	@ (8003fb4 <xTaskIncrementTick+0x150>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d203      	bcs.n	8003f0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f06:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc0 <xTaskIncrementTick+0x15c>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f0c:	e02e      	b.n	8003f6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fca1 	bl	800385a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	3318      	adds	r3, #24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fc98 	bl	800385a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	2201      	movs	r2, #1
 8003f30:	409a      	lsls	r2, r3
 8003f32:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <xTaskIncrementTick+0x160>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	4a22      	ldr	r2, [pc, #136]	@ (8003fc4 <xTaskIncrementTick+0x160>)
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc8 <xTaskIncrementTick+0x164>)
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f7ff fc24 	bl	80037a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fcc <xTaskIncrementTick+0x168>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d3b9      	bcc.n	8003eda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f66:	2301      	movs	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6a:	e7b6      	b.n	8003eda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f6c:	4b17      	ldr	r3, [pc, #92]	@ (8003fcc <xTaskIncrementTick+0x168>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f72:	4915      	ldr	r1, [pc, #84]	@ (8003fc8 <xTaskIncrementTick+0x164>)
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d901      	bls.n	8003f88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f84:	2301      	movs	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f88:	4b11      	ldr	r3, [pc, #68]	@ (8003fd0 <xTaskIncrementTick+0x16c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e004      	b.n	8003fa0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f96:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <xTaskIncrementTick+0x170>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd4 <xTaskIncrementTick+0x170>)
 8003f9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fa0:	697b      	ldr	r3, [r7, #20]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200004e4 	.word	0x200004e4
 8003fb0:	200004c0 	.word	0x200004c0
 8003fb4:	20000474 	.word	0x20000474
 8003fb8:	20000478 	.word	0x20000478
 8003fbc:	200004d4 	.word	0x200004d4
 8003fc0:	200004dc 	.word	0x200004dc
 8003fc4:	200004c4 	.word	0x200004c4
 8003fc8:	200003c0 	.word	0x200003c0
 8003fcc:	200003bc 	.word	0x200003bc
 8003fd0:	200004d0 	.word	0x200004d0
 8003fd4:	200004cc 	.word	0x200004cc

08003fd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fde:	4b27      	ldr	r3, [pc, #156]	@ (800407c <vTaskSwitchContext+0xa4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fe6:	4b26      	ldr	r3, [pc, #152]	@ (8004080 <vTaskSwitchContext+0xa8>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fec:	e040      	b.n	8004070 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003fee:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <vTaskSwitchContext+0xa8>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff4:	4b23      	ldr	r3, [pc, #140]	@ (8004084 <vTaskSwitchContext+0xac>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	fab3 f383 	clz	r3, r3
 8004000:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	f1c3 031f 	rsb	r3, r3, #31
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	491f      	ldr	r1, [pc, #124]	@ (8004088 <vTaskSwitchContext+0xb0>)
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <vTaskSwitchContext+0x5e>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	607b      	str	r3, [r7, #4]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <vTaskSwitchContext+0x5a>
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4a11      	ldr	r2, [pc, #68]	@ (8004088 <vTaskSwitchContext+0xb0>)
 8004042:	4413      	add	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	3308      	adds	r3, #8
 8004058:	429a      	cmp	r2, r3
 800405a:	d104      	bne.n	8004066 <vTaskSwitchContext+0x8e>
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a07      	ldr	r2, [pc, #28]	@ (800408c <vTaskSwitchContext+0xb4>)
 800406e:	6013      	str	r3, [r2, #0]
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	200004e4 	.word	0x200004e4
 8004080:	200004d0 	.word	0x200004d0
 8004084:	200004c4 	.word	0x200004c4
 8004088:	200003c0 	.word	0x200003c0
 800408c:	200003bc 	.word	0x200003bc

08004090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004098:	f000 f852 	bl	8004140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800409c:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <prvIdleTask+0x28>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d9f9      	bls.n	8004098 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <prvIdleTask+0x2c>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040b4:	e7f0      	b.n	8004098 <prvIdleTask+0x8>
 80040b6:	bf00      	nop
 80040b8:	200003c0 	.word	0x200003c0
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	e00c      	b.n	80040e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a12      	ldr	r2, [pc, #72]	@ (8004120 <prvInitialiseTaskLists+0x60>)
 80040d8:	4413      	add	r3, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fb33 	bl	8003746 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3301      	adds	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b06      	cmp	r3, #6
 80040ea:	d9ef      	bls.n	80040cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040ec:	480d      	ldr	r0, [pc, #52]	@ (8004124 <prvInitialiseTaskLists+0x64>)
 80040ee:	f7ff fb2a 	bl	8003746 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040f2:	480d      	ldr	r0, [pc, #52]	@ (8004128 <prvInitialiseTaskLists+0x68>)
 80040f4:	f7ff fb27 	bl	8003746 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040f8:	480c      	ldr	r0, [pc, #48]	@ (800412c <prvInitialiseTaskLists+0x6c>)
 80040fa:	f7ff fb24 	bl	8003746 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040fe:	480c      	ldr	r0, [pc, #48]	@ (8004130 <prvInitialiseTaskLists+0x70>)
 8004100:	f7ff fb21 	bl	8003746 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004104:	480b      	ldr	r0, [pc, #44]	@ (8004134 <prvInitialiseTaskLists+0x74>)
 8004106:	f7ff fb1e 	bl	8003746 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800410a:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <prvInitialiseTaskLists+0x78>)
 800410c:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <prvInitialiseTaskLists+0x64>)
 800410e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <prvInitialiseTaskLists+0x7c>)
 8004112:	4a05      	ldr	r2, [pc, #20]	@ (8004128 <prvInitialiseTaskLists+0x68>)
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200003c0 	.word	0x200003c0
 8004124:	2000044c 	.word	0x2000044c
 8004128:	20000460 	.word	0x20000460
 800412c:	2000047c 	.word	0x2000047c
 8004130:	20000490 	.word	0x20000490
 8004134:	200004a8 	.word	0x200004a8
 8004138:	20000474 	.word	0x20000474
 800413c:	20000478 	.word	0x20000478

08004140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004146:	e019      	b.n	800417c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004148:	f000 fa0e 	bl	8004568 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414c:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <prvCheckTasksWaitingTermination+0x50>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fb7e 	bl	800385a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <prvCheckTasksWaitingTermination+0x54>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3b01      	subs	r3, #1
 8004164:	4a0b      	ldr	r2, [pc, #44]	@ (8004194 <prvCheckTasksWaitingTermination+0x54>)
 8004166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <prvCheckTasksWaitingTermination+0x58>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3b01      	subs	r3, #1
 800416e:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <prvCheckTasksWaitingTermination+0x58>)
 8004170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004172:	f000 fa2b 	bl	80045cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f810 	bl	800419c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800417c:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <prvCheckTasksWaitingTermination+0x58>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e1      	bne.n	8004148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000490 	.word	0x20000490
 8004194:	200004bc 	.word	0x200004bc
 8004198:	200004a4 	.word	0x200004a4

0800419c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fb86 	bl	80048c4 <vPortFree>
				vPortFree( pxTCB );
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fb83 	bl	80048c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041be:	e019      	b.n	80041f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d103      	bne.n	80041d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fb7a 	bl	80048c4 <vPortFree>
	}
 80041d0:	e010      	b.n	80041f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d00b      	beq.n	80041f4 <prvDeleteTCB+0x58>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <prvDeleteTCB+0x54>
	}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800420c:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 800420e:	f04f 32ff 	mov.w	r2, #4294967295
 8004212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004214:	e008      	b.n	8004228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004216:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a04      	ldr	r2, [pc, #16]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20000474 	.word	0x20000474
 8004238:	200004dc 	.word	0x200004dc

0800423c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004246:	4b29      	ldr	r3, [pc, #164]	@ (80042ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800424c:	4b28      	ldr	r3, [pc, #160]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3304      	adds	r3, #4
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fb01 	bl	800385a <uxListRemove>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800425e:	4b24      	ldr	r3, [pc, #144]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004264:	2201      	movs	r2, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43da      	mvns	r2, r3
 800426c:	4b21      	ldr	r3, [pc, #132]	@ (80042f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4013      	ands	r3, r2
 8004272:	4a20      	ldr	r2, [pc, #128]	@ (80042f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004274:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d10a      	bne.n	8004294 <prvAddCurrentTaskToDelayedList+0x58>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004284:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	481a      	ldr	r0, [pc, #104]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800428e:	f7ff fa87 	bl	80037a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004292:	e026      	b.n	80042e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800429c:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d209      	bcs.n	80042c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ac:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f7ff fa95 	bl	80037e8 <vListInsert>
}
 80042be:	e010      	b.n	80042e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004300 <prvAddCurrentTaskToDelayedList+0xc4>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f7ff fa8b 	bl	80037e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d202      	bcs.n	80042e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042dc:	4a09      	ldr	r2, [pc, #36]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6013      	str	r3, [r2, #0]
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200004c0 	.word	0x200004c0
 80042f0:	200003bc 	.word	0x200003bc
 80042f4:	200004c4 	.word	0x200004c4
 80042f8:	200004a8 	.word	0x200004a8
 80042fc:	20000478 	.word	0x20000478
 8004300:	20000474 	.word	0x20000474
 8004304:	200004dc 	.word	0x200004dc

08004308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3b04      	subs	r3, #4
 8004318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b04      	subs	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3b04      	subs	r3, #4
 8004336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004338:	4a0c      	ldr	r2, [pc, #48]	@ (800436c <pxPortInitialiseStack+0x64>)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3b14      	subs	r3, #20
 8004342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b04      	subs	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f06f 0202 	mvn.w	r2, #2
 8004356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b20      	subs	r3, #32
 800435c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	08004371 	.word	0x08004371

08004370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800437a:	4b13      	ldr	r3, [pc, #76]	@ (80043c8 <prvTaskExitError+0x58>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d00b      	beq.n	800439c <prvTaskExitError+0x2c>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <prvTaskExitError+0x28>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	60bb      	str	r3, [r7, #8]
}
 80043ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043b0:	bf00      	nop
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0fc      	beq.n	80043b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	2000000c 	.word	0x2000000c
 80043cc:	00000000 	.word	0x00000000

080043d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043d0:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <pxCurrentTCBConst2>)
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	6808      	ldr	r0, [r1, #0]
 80043d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	f380 8809 	msr	PSP, r0
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f04f 0000 	mov.w	r0, #0
 80043e6:	f380 8811 	msr	BASEPRI, r0
 80043ea:	4770      	bx	lr
 80043ec:	f3af 8000 	nop.w

080043f0 <pxCurrentTCBConst2>:
 80043f0:	200003bc 	.word	0x200003bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043f8:	4808      	ldr	r0, [pc, #32]	@ (800441c <prvPortStartFirstTask+0x24>)
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	6800      	ldr	r0, [r0, #0]
 80043fe:	f380 8808 	msr	MSP, r0
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f380 8814 	msr	CONTROL, r0
 800440a:	b662      	cpsie	i
 800440c:	b661      	cpsie	f
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	df00      	svc	0
 8004418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800441a:	bf00      	nop
 800441c:	e000ed08 	.word	0xe000ed08

08004420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004426:	4b47      	ldr	r3, [pc, #284]	@ (8004544 <xPortStartScheduler+0x124>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a47      	ldr	r2, [pc, #284]	@ (8004548 <xPortStartScheduler+0x128>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d10b      	bne.n	8004448 <xPortStartScheduler+0x28>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	613b      	str	r3, [r7, #16]
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004448:	4b3e      	ldr	r3, [pc, #248]	@ (8004544 <xPortStartScheduler+0x124>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a3f      	ldr	r2, [pc, #252]	@ (800454c <xPortStartScheduler+0x12c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10b      	bne.n	800446a <xPortStartScheduler+0x4a>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	60fb      	str	r3, [r7, #12]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800446a:	4b39      	ldr	r3, [pc, #228]	@ (8004550 <xPortStartScheduler+0x130>)
 800446c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	22ff      	movs	r2, #255	@ 0xff
 800447a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800448c:	b2da      	uxtb	r2, r3
 800448e:	4b31      	ldr	r3, [pc, #196]	@ (8004554 <xPortStartScheduler+0x134>)
 8004490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004492:	4b31      	ldr	r3, [pc, #196]	@ (8004558 <xPortStartScheduler+0x138>)
 8004494:	2207      	movs	r2, #7
 8004496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004498:	e009      	b.n	80044ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800449a:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <xPortStartScheduler+0x138>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3b01      	subs	r3, #1
 80044a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004558 <xPortStartScheduler+0x138>)
 80044a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b80      	cmp	r3, #128	@ 0x80
 80044b8:	d0ef      	beq.n	800449a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ba:	4b27      	ldr	r3, [pc, #156]	@ (8004558 <xPortStartScheduler+0x138>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1c3 0307 	rsb	r3, r3, #7
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d00b      	beq.n	80044de <xPortStartScheduler+0xbe>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60bb      	str	r3, [r7, #8]
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	e7fd      	b.n	80044da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <xPortStartScheduler+0x138>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004558 <xPortStartScheduler+0x138>)
 80044e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <xPortStartScheduler+0x138>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044f0:	4a19      	ldr	r2, [pc, #100]	@ (8004558 <xPortStartScheduler+0x138>)
 80044f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044fc:	4b17      	ldr	r3, [pc, #92]	@ (800455c <xPortStartScheduler+0x13c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a16      	ldr	r2, [pc, #88]	@ (800455c <xPortStartScheduler+0x13c>)
 8004502:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004508:	4b14      	ldr	r3, [pc, #80]	@ (800455c <xPortStartScheduler+0x13c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a13      	ldr	r2, [pc, #76]	@ (800455c <xPortStartScheduler+0x13c>)
 800450e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004514:	f000 f8da 	bl	80046cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <xPortStartScheduler+0x140>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800451e:	f000 f8f9 	bl	8004714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004522:	4b10      	ldr	r3, [pc, #64]	@ (8004564 <xPortStartScheduler+0x144>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0f      	ldr	r2, [pc, #60]	@ (8004564 <xPortStartScheduler+0x144>)
 8004528:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800452c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800452e:	f7ff ff63 	bl	80043f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004532:	f7ff fd51 	bl	8003fd8 <vTaskSwitchContext>
	prvTaskExitError();
 8004536:	f7ff ff1b 	bl	8004370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	e000ed00 	.word	0xe000ed00
 8004548:	410fc271 	.word	0x410fc271
 800454c:	410fc270 	.word	0x410fc270
 8004550:	e000e400 	.word	0xe000e400
 8004554:	200004e8 	.word	0x200004e8
 8004558:	200004ec 	.word	0x200004ec
 800455c:	e000ed20 	.word	0xe000ed20
 8004560:	2000000c 	.word	0x2000000c
 8004564:	e000ef34 	.word	0xe000ef34

08004568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004582:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <vPortEnterCritical+0x5c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3301      	adds	r3, #1
 8004588:	4a0e      	ldr	r2, [pc, #56]	@ (80045c4 <vPortEnterCritical+0x5c>)
 800458a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800458c:	4b0d      	ldr	r3, [pc, #52]	@ (80045c4 <vPortEnterCritical+0x5c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d110      	bne.n	80045b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004594:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <vPortEnterCritical+0x60>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	603b      	str	r3, [r7, #0]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <vPortEnterCritical+0x4a>
	}
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	2000000c 	.word	0x2000000c
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045d2:	4b12      	ldr	r3, [pc, #72]	@ (800461c <vPortExitCritical+0x50>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <vPortExitCritical+0x26>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	607b      	str	r3, [r7, #4]
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045f2:	4b0a      	ldr	r3, [pc, #40]	@ (800461c <vPortExitCritical+0x50>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	4a08      	ldr	r2, [pc, #32]	@ (800461c <vPortExitCritical+0x50>)
 80045fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045fc:	4b07      	ldr	r3, [pc, #28]	@ (800461c <vPortExitCritical+0x50>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <vPortExitCritical+0x44>
 8004604:	2300      	movs	r3, #0
 8004606:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800460e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	2000000c 	.word	0x2000000c

08004620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004620:	f3ef 8009 	mrs	r0, PSP
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4b15      	ldr	r3, [pc, #84]	@ (8004680 <pxCurrentTCBConst>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	f01e 0f10 	tst.w	lr, #16
 8004630:	bf08      	it	eq
 8004632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	6010      	str	r0, [r2, #0]
 800463c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004640:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004644:	f380 8811 	msr	BASEPRI, r0
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f7ff fcc2 	bl	8003fd8 <vTaskSwitchContext>
 8004654:	f04f 0000 	mov.w	r0, #0
 8004658:	f380 8811 	msr	BASEPRI, r0
 800465c:	bc09      	pop	{r0, r3}
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	6808      	ldr	r0, [r1, #0]
 8004662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004666:	f01e 0f10 	tst.w	lr, #16
 800466a:	bf08      	it	eq
 800466c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004670:	f380 8809 	msr	PSP, r0
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	f3af 8000 	nop.w

08004680 <pxCurrentTCBConst>:
 8004680:	200003bc 	.word	0x200003bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
}
 80046a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046a2:	f7ff fbdf 	bl	8003e64 <xTaskIncrementTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <SysTick_Handler+0x40>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f383 8811 	msr	BASEPRI, r3
}
 80046be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <vPortSetupTimerInterrupt+0x34>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <vPortSetupTimerInterrupt+0x38>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <vPortSetupTimerInterrupt+0x3c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <vPortSetupTimerInterrupt+0x40>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	4a09      	ldr	r2, [pc, #36]	@ (8004710 <vPortSetupTimerInterrupt+0x44>)
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ee:	4b04      	ldr	r3, [pc, #16]	@ (8004700 <vPortSetupTimerInterrupt+0x34>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e010 	.word	0xe000e010
 8004704:	e000e018 	.word	0xe000e018
 8004708:	20000000 	.word	0x20000000
 800470c:	10624dd3 	.word	0x10624dd3
 8004710:	e000e014 	.word	0xe000e014

08004714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004714:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004724 <vPortEnableVFP+0x10>
 8004718:	6801      	ldr	r1, [r0, #0]
 800471a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800471e:	6001      	str	r1, [r0, #0]
 8004720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004722:	bf00      	nop
 8004724:	e000ed88 	.word	0xe000ed88

08004728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	@ 0x28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004734:	f7ff faea 	bl	8003d0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004738:	4b5c      	ldr	r3, [pc, #368]	@ (80048ac <pvPortMalloc+0x184>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004740:	f000 f924 	bl	800498c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004744:	4b5a      	ldr	r3, [pc, #360]	@ (80048b0 <pvPortMalloc+0x188>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8095 	bne.w	800487c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01e      	beq.n	8004796 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004758:	2208      	movs	r2, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	2b00      	cmp	r3, #0
 8004768:	d015      	beq.n	8004796 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f023 0307 	bic.w	r3, r3, #7
 8004770:	3308      	adds	r3, #8
 8004772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <pvPortMalloc+0x6e>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	617b      	str	r3, [r7, #20]
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d06f      	beq.n	800487c <pvPortMalloc+0x154>
 800479c:	4b45      	ldr	r3, [pc, #276]	@ (80048b4 <pvPortMalloc+0x18c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d86a      	bhi.n	800487c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047a6:	4b44      	ldr	r3, [pc, #272]	@ (80048b8 <pvPortMalloc+0x190>)
 80047a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047aa:	4b43      	ldr	r3, [pc, #268]	@ (80048b8 <pvPortMalloc+0x190>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047b0:	e004      	b.n	80047bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d903      	bls.n	80047ce <pvPortMalloc+0xa6>
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f1      	bne.n	80047b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047ce:	4b37      	ldr	r3, [pc, #220]	@ (80048ac <pvPortMalloc+0x184>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d051      	beq.n	800487c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2208      	movs	r2, #8
 80047de:	4413      	add	r3, r2
 80047e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	1ad2      	subs	r2, r2, r3
 80047f2:	2308      	movs	r3, #8
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d920      	bls.n	800483c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4413      	add	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <pvPortMalloc+0xfc>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	613b      	str	r3, [r7, #16]
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004836:	69b8      	ldr	r0, [r7, #24]
 8004838:	f000 f90a 	bl	8004a50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800483c:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <pvPortMalloc+0x18c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <pvPortMalloc+0x18c>)
 8004848:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800484a:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <pvPortMalloc+0x18c>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b1b      	ldr	r3, [pc, #108]	@ (80048bc <pvPortMalloc+0x194>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d203      	bcs.n	800485e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004856:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <pvPortMalloc+0x18c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <pvPortMalloc+0x194>)
 800485c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	4b13      	ldr	r3, [pc, #76]	@ (80048b0 <pvPortMalloc+0x188>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	431a      	orrs	r2, r3
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004872:	4b13      	ldr	r3, [pc, #76]	@ (80048c0 <pvPortMalloc+0x198>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	4a11      	ldr	r2, [pc, #68]	@ (80048c0 <pvPortMalloc+0x198>)
 800487a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800487c:	f7ff fa54 	bl	8003d28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <pvPortMalloc+0x17a>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	60fb      	str	r3, [r7, #12]
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <pvPortMalloc+0x176>
	return pvReturn;
 80048a2:	69fb      	ldr	r3, [r7, #28]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	@ 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200040f8 	.word	0x200040f8
 80048b0:	2000410c 	.word	0x2000410c
 80048b4:	200040fc 	.word	0x200040fc
 80048b8:	200040f0 	.word	0x200040f0
 80048bc:	20004100 	.word	0x20004100
 80048c0:	20004104 	.word	0x20004104

080048c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04f      	beq.n	8004976 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048d6:	2308      	movs	r3, #8
 80048d8:	425b      	negs	r3, r3
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b25      	ldr	r3, [pc, #148]	@ (8004980 <vPortFree+0xbc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <vPortFree+0x46>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <vPortFree+0x66>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <vPortFree+0xbc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01e      	beq.n	8004976 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11a      	bne.n	8004976 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <vPortFree+0xbc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004950:	f7ff f9dc 	bl	8003d0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <vPortFree+0xc0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4413      	add	r3, r2
 800495e:	4a09      	ldr	r2, [pc, #36]	@ (8004984 <vPortFree+0xc0>)
 8004960:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004962:	6938      	ldr	r0, [r7, #16]
 8004964:	f000 f874 	bl	8004a50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004968:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <vPortFree+0xc4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	4a06      	ldr	r2, [pc, #24]	@ (8004988 <vPortFree+0xc4>)
 8004970:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004972:	f7ff f9d9 	bl	8003d28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	2000410c 	.word	0x2000410c
 8004984:	200040fc 	.word	0x200040fc
 8004988:	20004108 	.word	0x20004108

0800498c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004992:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004996:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004998:	4b27      	ldr	r3, [pc, #156]	@ (8004a38 <prvHeapInit+0xac>)
 800499a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3307      	adds	r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0307 	bic.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <prvHeapInit+0xac>)
 80049bc:	4413      	add	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049c4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a3c <prvHeapInit+0xb0>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049ca:	4b1c      	ldr	r3, [pc, #112]	@ (8004a3c <prvHeapInit+0xb0>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049d8:	2208      	movs	r2, #8
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0307 	bic.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <prvHeapInit+0xb4>)
 80049ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <prvHeapInit+0xb4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049f6:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <prvHeapInit+0xb4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <prvHeapInit+0xb4>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a0a      	ldr	r2, [pc, #40]	@ (8004a44 <prvHeapInit+0xb8>)
 8004a1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a09      	ldr	r2, [pc, #36]	@ (8004a48 <prvHeapInit+0xbc>)
 8004a22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a24:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <prvHeapInit+0xc0>)
 8004a26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	200004f0 	.word	0x200004f0
 8004a3c:	200040f0 	.word	0x200040f0
 8004a40:	200040f8 	.word	0x200040f8
 8004a44:	20004100 	.word	0x20004100
 8004a48:	200040fc 	.word	0x200040fc
 8004a4c:	2000410c 	.word	0x2000410c

08004a50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a58:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <prvInsertBlockIntoFreeList+0xac>)
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e002      	b.n	8004a64 <prvInsertBlockIntoFreeList+0x14>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d8f7      	bhi.n	8004a5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4413      	add	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d108      	bne.n	8004a92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	441a      	add	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	441a      	add	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d118      	bne.n	8004ad8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <prvInsertBlockIntoFreeList+0xb0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d00d      	beq.n	8004ace <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	441a      	add	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	e008      	b.n	8004ae0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e003      	b.n	8004ae0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d002      	beq.n	8004aee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	200040f0 	.word	0x200040f0
 8004b00:	200040f8 	.word	0x200040f8

08004b04 <siprintf>:
 8004b04:	b40e      	push	{r1, r2, r3}
 8004b06:	b500      	push	{lr}
 8004b08:	b09c      	sub	sp, #112	@ 0x70
 8004b0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b0c:	9002      	str	r0, [sp, #8]
 8004b0e:	9006      	str	r0, [sp, #24]
 8004b10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b14:	4809      	ldr	r0, [pc, #36]	@ (8004b3c <siprintf+0x38>)
 8004b16:	9107      	str	r1, [sp, #28]
 8004b18:	9104      	str	r1, [sp, #16]
 8004b1a:	4909      	ldr	r1, [pc, #36]	@ (8004b40 <siprintf+0x3c>)
 8004b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b20:	9105      	str	r1, [sp, #20]
 8004b22:	6800      	ldr	r0, [r0, #0]
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	a902      	add	r1, sp, #8
 8004b28:	f000 f9a2 	bl	8004e70 <_svfiprintf_r>
 8004b2c:	9b02      	ldr	r3, [sp, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	b01c      	add	sp, #112	@ 0x70
 8004b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b38:	b003      	add	sp, #12
 8004b3a:	4770      	bx	lr
 8004b3c:	20000010 	.word	0x20000010
 8004b40:	ffff0208 	.word	0xffff0208

08004b44 <memset>:
 8004b44:	4402      	add	r2, r0
 8004b46:	4603      	mov	r3, r0
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d100      	bne.n	8004b4e <memset+0xa>
 8004b4c:	4770      	bx	lr
 8004b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b52:	e7f9      	b.n	8004b48 <memset+0x4>

08004b54 <__errno>:
 8004b54:	4b01      	ldr	r3, [pc, #4]	@ (8004b5c <__errno+0x8>)
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000010 	.word	0x20000010

08004b60 <__libc_init_array>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	4d0d      	ldr	r5, [pc, #52]	@ (8004b98 <__libc_init_array+0x38>)
 8004b64:	4c0d      	ldr	r4, [pc, #52]	@ (8004b9c <__libc_init_array+0x3c>)
 8004b66:	1b64      	subs	r4, r4, r5
 8004b68:	10a4      	asrs	r4, r4, #2
 8004b6a:	2600      	movs	r6, #0
 8004b6c:	42a6      	cmp	r6, r4
 8004b6e:	d109      	bne.n	8004b84 <__libc_init_array+0x24>
 8004b70:	4d0b      	ldr	r5, [pc, #44]	@ (8004ba0 <__libc_init_array+0x40>)
 8004b72:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba4 <__libc_init_array+0x44>)
 8004b74:	f000 fc66 	bl	8005444 <_init>
 8004b78:	1b64      	subs	r4, r4, r5
 8004b7a:	10a4      	asrs	r4, r4, #2
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	42a6      	cmp	r6, r4
 8004b80:	d105      	bne.n	8004b8e <__libc_init_array+0x2e>
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b88:	4798      	blx	r3
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7ee      	b.n	8004b6c <__libc_init_array+0xc>
 8004b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b92:	4798      	blx	r3
 8004b94:	3601      	adds	r6, #1
 8004b96:	e7f2      	b.n	8004b7e <__libc_init_array+0x1e>
 8004b98:	0800556c 	.word	0x0800556c
 8004b9c:	0800556c 	.word	0x0800556c
 8004ba0:	0800556c 	.word	0x0800556c
 8004ba4:	08005570 	.word	0x08005570

08004ba8 <__retarget_lock_acquire_recursive>:
 8004ba8:	4770      	bx	lr

08004baa <__retarget_lock_release_recursive>:
 8004baa:	4770      	bx	lr

08004bac <memcpy>:
 8004bac:	440a      	add	r2, r1
 8004bae:	4291      	cmp	r1, r2
 8004bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bb4:	d100      	bne.n	8004bb8 <memcpy+0xc>
 8004bb6:	4770      	bx	lr
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bc2:	4291      	cmp	r1, r2
 8004bc4:	d1f9      	bne.n	8004bba <memcpy+0xe>
 8004bc6:	bd10      	pop	{r4, pc}

08004bc8 <_free_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4605      	mov	r5, r0
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	d041      	beq.n	8004c54 <_free_r+0x8c>
 8004bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd4:	1f0c      	subs	r4, r1, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bfb8      	it	lt
 8004bda:	18e4      	addlt	r4, r4, r3
 8004bdc:	f000 f8e0 	bl	8004da0 <__malloc_lock>
 8004be0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c58 <_free_r+0x90>)
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	b933      	cbnz	r3, 8004bf4 <_free_r+0x2c>
 8004be6:	6063      	str	r3, [r4, #4]
 8004be8:	6014      	str	r4, [r2, #0]
 8004bea:	4628      	mov	r0, r5
 8004bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf0:	f000 b8dc 	b.w	8004dac <__malloc_unlock>
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	d908      	bls.n	8004c0a <_free_r+0x42>
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	1821      	adds	r1, r4, r0
 8004bfc:	428b      	cmp	r3, r1
 8004bfe:	bf01      	itttt	eq
 8004c00:	6819      	ldreq	r1, [r3, #0]
 8004c02:	685b      	ldreq	r3, [r3, #4]
 8004c04:	1809      	addeq	r1, r1, r0
 8004c06:	6021      	streq	r1, [r4, #0]
 8004c08:	e7ed      	b.n	8004be6 <_free_r+0x1e>
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	b10b      	cbz	r3, 8004c14 <_free_r+0x4c>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d9fa      	bls.n	8004c0a <_free_r+0x42>
 8004c14:	6811      	ldr	r1, [r2, #0]
 8004c16:	1850      	adds	r0, r2, r1
 8004c18:	42a0      	cmp	r0, r4
 8004c1a:	d10b      	bne.n	8004c34 <_free_r+0x6c>
 8004c1c:	6820      	ldr	r0, [r4, #0]
 8004c1e:	4401      	add	r1, r0
 8004c20:	1850      	adds	r0, r2, r1
 8004c22:	4283      	cmp	r3, r0
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	d1e0      	bne.n	8004bea <_free_r+0x22>
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	6053      	str	r3, [r2, #4]
 8004c2e:	4408      	add	r0, r1
 8004c30:	6010      	str	r0, [r2, #0]
 8004c32:	e7da      	b.n	8004bea <_free_r+0x22>
 8004c34:	d902      	bls.n	8004c3c <_free_r+0x74>
 8004c36:	230c      	movs	r3, #12
 8004c38:	602b      	str	r3, [r5, #0]
 8004c3a:	e7d6      	b.n	8004bea <_free_r+0x22>
 8004c3c:	6820      	ldr	r0, [r4, #0]
 8004c3e:	1821      	adds	r1, r4, r0
 8004c40:	428b      	cmp	r3, r1
 8004c42:	bf04      	itt	eq
 8004c44:	6819      	ldreq	r1, [r3, #0]
 8004c46:	685b      	ldreq	r3, [r3, #4]
 8004c48:	6063      	str	r3, [r4, #4]
 8004c4a:	bf04      	itt	eq
 8004c4c:	1809      	addeq	r1, r1, r0
 8004c4e:	6021      	streq	r1, [r4, #0]
 8004c50:	6054      	str	r4, [r2, #4]
 8004c52:	e7ca      	b.n	8004bea <_free_r+0x22>
 8004c54:	bd38      	pop	{r3, r4, r5, pc}
 8004c56:	bf00      	nop
 8004c58:	20004254 	.word	0x20004254

08004c5c <sbrk_aligned>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8004c9c <sbrk_aligned+0x40>)
 8004c60:	460c      	mov	r4, r1
 8004c62:	6831      	ldr	r1, [r6, #0]
 8004c64:	4605      	mov	r5, r0
 8004c66:	b911      	cbnz	r1, 8004c6e <sbrk_aligned+0x12>
 8004c68:	f000 fba6 	bl	80053b8 <_sbrk_r>
 8004c6c:	6030      	str	r0, [r6, #0]
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4628      	mov	r0, r5
 8004c72:	f000 fba1 	bl	80053b8 <_sbrk_r>
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	d103      	bne.n	8004c82 <sbrk_aligned+0x26>
 8004c7a:	f04f 34ff 	mov.w	r4, #4294967295
 8004c7e:	4620      	mov	r0, r4
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
 8004c82:	1cc4      	adds	r4, r0, #3
 8004c84:	f024 0403 	bic.w	r4, r4, #3
 8004c88:	42a0      	cmp	r0, r4
 8004c8a:	d0f8      	beq.n	8004c7e <sbrk_aligned+0x22>
 8004c8c:	1a21      	subs	r1, r4, r0
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f000 fb92 	bl	80053b8 <_sbrk_r>
 8004c94:	3001      	adds	r0, #1
 8004c96:	d1f2      	bne.n	8004c7e <sbrk_aligned+0x22>
 8004c98:	e7ef      	b.n	8004c7a <sbrk_aligned+0x1e>
 8004c9a:	bf00      	nop
 8004c9c:	20004250 	.word	0x20004250

08004ca0 <_malloc_r>:
 8004ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca4:	1ccd      	adds	r5, r1, #3
 8004ca6:	f025 0503 	bic.w	r5, r5, #3
 8004caa:	3508      	adds	r5, #8
 8004cac:	2d0c      	cmp	r5, #12
 8004cae:	bf38      	it	cc
 8004cb0:	250c      	movcc	r5, #12
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	db01      	blt.n	8004cbc <_malloc_r+0x1c>
 8004cb8:	42a9      	cmp	r1, r5
 8004cba:	d904      	bls.n	8004cc6 <_malloc_r+0x26>
 8004cbc:	230c      	movs	r3, #12
 8004cbe:	6033      	str	r3, [r6, #0]
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d9c <_malloc_r+0xfc>
 8004cca:	f000 f869 	bl	8004da0 <__malloc_lock>
 8004cce:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd2:	461c      	mov	r4, r3
 8004cd4:	bb44      	cbnz	r4, 8004d28 <_malloc_r+0x88>
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f7ff ffbf 	bl	8004c5c <sbrk_aligned>
 8004cde:	1c43      	adds	r3, r0, #1
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	d158      	bne.n	8004d96 <_malloc_r+0xf6>
 8004ce4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ce8:	4627      	mov	r7, r4
 8004cea:	2f00      	cmp	r7, #0
 8004cec:	d143      	bne.n	8004d76 <_malloc_r+0xd6>
 8004cee:	2c00      	cmp	r4, #0
 8004cf0:	d04b      	beq.n	8004d8a <_malloc_r+0xea>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	4639      	mov	r1, r7
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	eb04 0903 	add.w	r9, r4, r3
 8004cfc:	f000 fb5c 	bl	80053b8 <_sbrk_r>
 8004d00:	4581      	cmp	r9, r0
 8004d02:	d142      	bne.n	8004d8a <_malloc_r+0xea>
 8004d04:	6821      	ldr	r1, [r4, #0]
 8004d06:	1a6d      	subs	r5, r5, r1
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f7ff ffa6 	bl	8004c5c <sbrk_aligned>
 8004d10:	3001      	adds	r0, #1
 8004d12:	d03a      	beq.n	8004d8a <_malloc_r+0xea>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	442b      	add	r3, r5
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	bb62      	cbnz	r2, 8004d7c <_malloc_r+0xdc>
 8004d22:	f8c8 7000 	str.w	r7, [r8]
 8004d26:	e00f      	b.n	8004d48 <_malloc_r+0xa8>
 8004d28:	6822      	ldr	r2, [r4, #0]
 8004d2a:	1b52      	subs	r2, r2, r5
 8004d2c:	d420      	bmi.n	8004d70 <_malloc_r+0xd0>
 8004d2e:	2a0b      	cmp	r2, #11
 8004d30:	d917      	bls.n	8004d62 <_malloc_r+0xc2>
 8004d32:	1961      	adds	r1, r4, r5
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	6025      	str	r5, [r4, #0]
 8004d38:	bf18      	it	ne
 8004d3a:	6059      	strne	r1, [r3, #4]
 8004d3c:	6863      	ldr	r3, [r4, #4]
 8004d3e:	bf08      	it	eq
 8004d40:	f8c8 1000 	streq.w	r1, [r8]
 8004d44:	5162      	str	r2, [r4, r5]
 8004d46:	604b      	str	r3, [r1, #4]
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f000 f82f 	bl	8004dac <__malloc_unlock>
 8004d4e:	f104 000b 	add.w	r0, r4, #11
 8004d52:	1d23      	adds	r3, r4, #4
 8004d54:	f020 0007 	bic.w	r0, r0, #7
 8004d58:	1ac2      	subs	r2, r0, r3
 8004d5a:	bf1c      	itt	ne
 8004d5c:	1a1b      	subne	r3, r3, r0
 8004d5e:	50a3      	strne	r3, [r4, r2]
 8004d60:	e7af      	b.n	8004cc2 <_malloc_r+0x22>
 8004d62:	6862      	ldr	r2, [r4, #4]
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	bf0c      	ite	eq
 8004d68:	f8c8 2000 	streq.w	r2, [r8]
 8004d6c:	605a      	strne	r2, [r3, #4]
 8004d6e:	e7eb      	b.n	8004d48 <_malloc_r+0xa8>
 8004d70:	4623      	mov	r3, r4
 8004d72:	6864      	ldr	r4, [r4, #4]
 8004d74:	e7ae      	b.n	8004cd4 <_malloc_r+0x34>
 8004d76:	463c      	mov	r4, r7
 8004d78:	687f      	ldr	r7, [r7, #4]
 8004d7a:	e7b6      	b.n	8004cea <_malloc_r+0x4a>
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	d1fb      	bne.n	8004d7c <_malloc_r+0xdc>
 8004d84:	2300      	movs	r3, #0
 8004d86:	6053      	str	r3, [r2, #4]
 8004d88:	e7de      	b.n	8004d48 <_malloc_r+0xa8>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f000 f80c 	bl	8004dac <__malloc_unlock>
 8004d94:	e794      	b.n	8004cc0 <_malloc_r+0x20>
 8004d96:	6005      	str	r5, [r0, #0]
 8004d98:	e7d6      	b.n	8004d48 <_malloc_r+0xa8>
 8004d9a:	bf00      	nop
 8004d9c:	20004254 	.word	0x20004254

08004da0 <__malloc_lock>:
 8004da0:	4801      	ldr	r0, [pc, #4]	@ (8004da8 <__malloc_lock+0x8>)
 8004da2:	f7ff bf01 	b.w	8004ba8 <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	2000424c 	.word	0x2000424c

08004dac <__malloc_unlock>:
 8004dac:	4801      	ldr	r0, [pc, #4]	@ (8004db4 <__malloc_unlock+0x8>)
 8004dae:	f7ff befc 	b.w	8004baa <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	2000424c 	.word	0x2000424c

08004db8 <__ssputs_r>:
 8004db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbc:	688e      	ldr	r6, [r1, #8]
 8004dbe:	461f      	mov	r7, r3
 8004dc0:	42be      	cmp	r6, r7
 8004dc2:	680b      	ldr	r3, [r1, #0]
 8004dc4:	4682      	mov	sl, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	4690      	mov	r8, r2
 8004dca:	d82d      	bhi.n	8004e28 <__ssputs_r+0x70>
 8004dcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004dd4:	d026      	beq.n	8004e24 <__ssputs_r+0x6c>
 8004dd6:	6965      	ldr	r5, [r4, #20]
 8004dd8:	6909      	ldr	r1, [r1, #16]
 8004dda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dde:	eba3 0901 	sub.w	r9, r3, r1
 8004de2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004de6:	1c7b      	adds	r3, r7, #1
 8004de8:	444b      	add	r3, r9
 8004dea:	106d      	asrs	r5, r5, #1
 8004dec:	429d      	cmp	r5, r3
 8004dee:	bf38      	it	cc
 8004df0:	461d      	movcc	r5, r3
 8004df2:	0553      	lsls	r3, r2, #21
 8004df4:	d527      	bpl.n	8004e46 <__ssputs_r+0x8e>
 8004df6:	4629      	mov	r1, r5
 8004df8:	f7ff ff52 	bl	8004ca0 <_malloc_r>
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	b360      	cbz	r0, 8004e5a <__ssputs_r+0xa2>
 8004e00:	6921      	ldr	r1, [r4, #16]
 8004e02:	464a      	mov	r2, r9
 8004e04:	f7ff fed2 	bl	8004bac <memcpy>
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e12:	81a3      	strh	r3, [r4, #12]
 8004e14:	6126      	str	r6, [r4, #16]
 8004e16:	6165      	str	r5, [r4, #20]
 8004e18:	444e      	add	r6, r9
 8004e1a:	eba5 0509 	sub.w	r5, r5, r9
 8004e1e:	6026      	str	r6, [r4, #0]
 8004e20:	60a5      	str	r5, [r4, #8]
 8004e22:	463e      	mov	r6, r7
 8004e24:	42be      	cmp	r6, r7
 8004e26:	d900      	bls.n	8004e2a <__ssputs_r+0x72>
 8004e28:	463e      	mov	r6, r7
 8004e2a:	6820      	ldr	r0, [r4, #0]
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	4641      	mov	r1, r8
 8004e30:	f000 faa8 	bl	8005384 <memmove>
 8004e34:	68a3      	ldr	r3, [r4, #8]
 8004e36:	1b9b      	subs	r3, r3, r6
 8004e38:	60a3      	str	r3, [r4, #8]
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	4433      	add	r3, r6
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	2000      	movs	r0, #0
 8004e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e46:	462a      	mov	r2, r5
 8004e48:	f000 fac6 	bl	80053d8 <_realloc_r>
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d1e0      	bne.n	8004e14 <__ssputs_r+0x5c>
 8004e52:	6921      	ldr	r1, [r4, #16]
 8004e54:	4650      	mov	r0, sl
 8004e56:	f7ff feb7 	bl	8004bc8 <_free_r>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	f8ca 3000 	str.w	r3, [sl]
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e66:	81a3      	strh	r3, [r4, #12]
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	e7e9      	b.n	8004e42 <__ssputs_r+0x8a>
	...

08004e70 <_svfiprintf_r>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	4698      	mov	r8, r3
 8004e76:	898b      	ldrh	r3, [r1, #12]
 8004e78:	061b      	lsls	r3, r3, #24
 8004e7a:	b09d      	sub	sp, #116	@ 0x74
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	460d      	mov	r5, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	d510      	bpl.n	8004ea6 <_svfiprintf_r+0x36>
 8004e84:	690b      	ldr	r3, [r1, #16]
 8004e86:	b973      	cbnz	r3, 8004ea6 <_svfiprintf_r+0x36>
 8004e88:	2140      	movs	r1, #64	@ 0x40
 8004e8a:	f7ff ff09 	bl	8004ca0 <_malloc_r>
 8004e8e:	6028      	str	r0, [r5, #0]
 8004e90:	6128      	str	r0, [r5, #16]
 8004e92:	b930      	cbnz	r0, 8004ea2 <_svfiprintf_r+0x32>
 8004e94:	230c      	movs	r3, #12
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	b01d      	add	sp, #116	@ 0x74
 8004e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea2:	2340      	movs	r3, #64	@ 0x40
 8004ea4:	616b      	str	r3, [r5, #20]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eaa:	2320      	movs	r3, #32
 8004eac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eb4:	2330      	movs	r3, #48	@ 0x30
 8004eb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005054 <_svfiprintf_r+0x1e4>
 8004eba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ebe:	f04f 0901 	mov.w	r9, #1
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	469a      	mov	sl, r3
 8004ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eca:	b10a      	cbz	r2, 8004ed0 <_svfiprintf_r+0x60>
 8004ecc:	2a25      	cmp	r2, #37	@ 0x25
 8004ece:	d1f9      	bne.n	8004ec4 <_svfiprintf_r+0x54>
 8004ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ed4:	d00b      	beq.n	8004eee <_svfiprintf_r+0x7e>
 8004ed6:	465b      	mov	r3, fp
 8004ed8:	4622      	mov	r2, r4
 8004eda:	4629      	mov	r1, r5
 8004edc:	4638      	mov	r0, r7
 8004ede:	f7ff ff6b 	bl	8004db8 <__ssputs_r>
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f000 80a7 	beq.w	8005036 <_svfiprintf_r+0x1c6>
 8004ee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004eea:	445a      	add	r2, fp
 8004eec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eee:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 809f 	beq.w	8005036 <_svfiprintf_r+0x1c6>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f02:	f10a 0a01 	add.w	sl, sl, #1
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	9307      	str	r3, [sp, #28]
 8004f0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f10:	4654      	mov	r4, sl
 8004f12:	2205      	movs	r2, #5
 8004f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f18:	484e      	ldr	r0, [pc, #312]	@ (8005054 <_svfiprintf_r+0x1e4>)
 8004f1a:	f7fb f981 	bl	8000220 <memchr>
 8004f1e:	9a04      	ldr	r2, [sp, #16]
 8004f20:	b9d8      	cbnz	r0, 8004f5a <_svfiprintf_r+0xea>
 8004f22:	06d0      	lsls	r0, r2, #27
 8004f24:	bf44      	itt	mi
 8004f26:	2320      	movmi	r3, #32
 8004f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f2c:	0711      	lsls	r1, r2, #28
 8004f2e:	bf44      	itt	mi
 8004f30:	232b      	movmi	r3, #43	@ 0x2b
 8004f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f36:	f89a 3000 	ldrb.w	r3, [sl]
 8004f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f3c:	d015      	beq.n	8004f6a <_svfiprintf_r+0xfa>
 8004f3e:	9a07      	ldr	r2, [sp, #28]
 8004f40:	4654      	mov	r4, sl
 8004f42:	2000      	movs	r0, #0
 8004f44:	f04f 0c0a 	mov.w	ip, #10
 8004f48:	4621      	mov	r1, r4
 8004f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f4e:	3b30      	subs	r3, #48	@ 0x30
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	d94b      	bls.n	8004fec <_svfiprintf_r+0x17c>
 8004f54:	b1b0      	cbz	r0, 8004f84 <_svfiprintf_r+0x114>
 8004f56:	9207      	str	r2, [sp, #28]
 8004f58:	e014      	b.n	8004f84 <_svfiprintf_r+0x114>
 8004f5a:	eba0 0308 	sub.w	r3, r0, r8
 8004f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f62:	4313      	orrs	r3, r2
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	46a2      	mov	sl, r4
 8004f68:	e7d2      	b.n	8004f10 <_svfiprintf_r+0xa0>
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	1d19      	adds	r1, r3, #4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	9103      	str	r1, [sp, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bfbb      	ittet	lt
 8004f76:	425b      	neglt	r3, r3
 8004f78:	f042 0202 	orrlt.w	r2, r2, #2
 8004f7c:	9307      	strge	r3, [sp, #28]
 8004f7e:	9307      	strlt	r3, [sp, #28]
 8004f80:	bfb8      	it	lt
 8004f82:	9204      	strlt	r2, [sp, #16]
 8004f84:	7823      	ldrb	r3, [r4, #0]
 8004f86:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f88:	d10a      	bne.n	8004fa0 <_svfiprintf_r+0x130>
 8004f8a:	7863      	ldrb	r3, [r4, #1]
 8004f8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f8e:	d132      	bne.n	8004ff6 <_svfiprintf_r+0x186>
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	9203      	str	r2, [sp, #12]
 8004f98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f9c:	3402      	adds	r4, #2
 8004f9e:	9305      	str	r3, [sp, #20]
 8004fa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005064 <_svfiprintf_r+0x1f4>
 8004fa4:	7821      	ldrb	r1, [r4, #0]
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	4650      	mov	r0, sl
 8004faa:	f7fb f939 	bl	8000220 <memchr>
 8004fae:	b138      	cbz	r0, 8004fc0 <_svfiprintf_r+0x150>
 8004fb0:	9b04      	ldr	r3, [sp, #16]
 8004fb2:	eba0 000a 	sub.w	r0, r0, sl
 8004fb6:	2240      	movs	r2, #64	@ 0x40
 8004fb8:	4082      	lsls	r2, r0
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	3401      	adds	r4, #1
 8004fbe:	9304      	str	r3, [sp, #16]
 8004fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc4:	4824      	ldr	r0, [pc, #144]	@ (8005058 <_svfiprintf_r+0x1e8>)
 8004fc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fca:	2206      	movs	r2, #6
 8004fcc:	f7fb f928 	bl	8000220 <memchr>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d036      	beq.n	8005042 <_svfiprintf_r+0x1d2>
 8004fd4:	4b21      	ldr	r3, [pc, #132]	@ (800505c <_svfiprintf_r+0x1ec>)
 8004fd6:	bb1b      	cbnz	r3, 8005020 <_svfiprintf_r+0x1b0>
 8004fd8:	9b03      	ldr	r3, [sp, #12]
 8004fda:	3307      	adds	r3, #7
 8004fdc:	f023 0307 	bic.w	r3, r3, #7
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	9303      	str	r3, [sp, #12]
 8004fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe6:	4433      	add	r3, r6
 8004fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fea:	e76a      	b.n	8004ec2 <_svfiprintf_r+0x52>
 8004fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	e7a8      	b.n	8004f48 <_svfiprintf_r+0xd8>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	3401      	adds	r4, #1
 8004ffa:	9305      	str	r3, [sp, #20]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f04f 0c0a 	mov.w	ip, #10
 8005002:	4620      	mov	r0, r4
 8005004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005008:	3a30      	subs	r2, #48	@ 0x30
 800500a:	2a09      	cmp	r2, #9
 800500c:	d903      	bls.n	8005016 <_svfiprintf_r+0x1a6>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0c6      	beq.n	8004fa0 <_svfiprintf_r+0x130>
 8005012:	9105      	str	r1, [sp, #20]
 8005014:	e7c4      	b.n	8004fa0 <_svfiprintf_r+0x130>
 8005016:	fb0c 2101 	mla	r1, ip, r1, r2
 800501a:	4604      	mov	r4, r0
 800501c:	2301      	movs	r3, #1
 800501e:	e7f0      	b.n	8005002 <_svfiprintf_r+0x192>
 8005020:	ab03      	add	r3, sp, #12
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	462a      	mov	r2, r5
 8005026:	4b0e      	ldr	r3, [pc, #56]	@ (8005060 <_svfiprintf_r+0x1f0>)
 8005028:	a904      	add	r1, sp, #16
 800502a:	4638      	mov	r0, r7
 800502c:	f3af 8000 	nop.w
 8005030:	1c42      	adds	r2, r0, #1
 8005032:	4606      	mov	r6, r0
 8005034:	d1d6      	bne.n	8004fe4 <_svfiprintf_r+0x174>
 8005036:	89ab      	ldrh	r3, [r5, #12]
 8005038:	065b      	lsls	r3, r3, #25
 800503a:	f53f af2d 	bmi.w	8004e98 <_svfiprintf_r+0x28>
 800503e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005040:	e72c      	b.n	8004e9c <_svfiprintf_r+0x2c>
 8005042:	ab03      	add	r3, sp, #12
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	462a      	mov	r2, r5
 8005048:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <_svfiprintf_r+0x1f0>)
 800504a:	a904      	add	r1, sp, #16
 800504c:	4638      	mov	r0, r7
 800504e:	f000 f879 	bl	8005144 <_printf_i>
 8005052:	e7ed      	b.n	8005030 <_svfiprintf_r+0x1c0>
 8005054:	08005530 	.word	0x08005530
 8005058:	0800553a 	.word	0x0800553a
 800505c:	00000000 	.word	0x00000000
 8005060:	08004db9 	.word	0x08004db9
 8005064:	08005536 	.word	0x08005536

08005068 <_printf_common>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	4616      	mov	r6, r2
 800506e:	4698      	mov	r8, r3
 8005070:	688a      	ldr	r2, [r1, #8]
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005078:	4293      	cmp	r3, r2
 800507a:	bfb8      	it	lt
 800507c:	4613      	movlt	r3, r2
 800507e:	6033      	str	r3, [r6, #0]
 8005080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005084:	4607      	mov	r7, r0
 8005086:	460c      	mov	r4, r1
 8005088:	b10a      	cbz	r2, 800508e <_printf_common+0x26>
 800508a:	3301      	adds	r3, #1
 800508c:	6033      	str	r3, [r6, #0]
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	0699      	lsls	r1, r3, #26
 8005092:	bf42      	ittt	mi
 8005094:	6833      	ldrmi	r3, [r6, #0]
 8005096:	3302      	addmi	r3, #2
 8005098:	6033      	strmi	r3, [r6, #0]
 800509a:	6825      	ldr	r5, [r4, #0]
 800509c:	f015 0506 	ands.w	r5, r5, #6
 80050a0:	d106      	bne.n	80050b0 <_printf_common+0x48>
 80050a2:	f104 0a19 	add.w	sl, r4, #25
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	6832      	ldr	r2, [r6, #0]
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	dc26      	bgt.n	80050fe <_printf_common+0x96>
 80050b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	3b00      	subs	r3, #0
 80050b8:	bf18      	it	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	0692      	lsls	r2, r2, #26
 80050be:	d42b      	bmi.n	8005118 <_printf_common+0xb0>
 80050c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050c4:	4641      	mov	r1, r8
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c8      	blx	r9
 80050ca:	3001      	adds	r0, #1
 80050cc:	d01e      	beq.n	800510c <_printf_common+0xa4>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	6922      	ldr	r2, [r4, #16]
 80050d2:	f003 0306 	and.w	r3, r3, #6
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	bf02      	ittt	eq
 80050da:	68e5      	ldreq	r5, [r4, #12]
 80050dc:	6833      	ldreq	r3, [r6, #0]
 80050de:	1aed      	subeq	r5, r5, r3
 80050e0:	68a3      	ldr	r3, [r4, #8]
 80050e2:	bf0c      	ite	eq
 80050e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e8:	2500      	movne	r5, #0
 80050ea:	4293      	cmp	r3, r2
 80050ec:	bfc4      	itt	gt
 80050ee:	1a9b      	subgt	r3, r3, r2
 80050f0:	18ed      	addgt	r5, r5, r3
 80050f2:	2600      	movs	r6, #0
 80050f4:	341a      	adds	r4, #26
 80050f6:	42b5      	cmp	r5, r6
 80050f8:	d11a      	bne.n	8005130 <_printf_common+0xc8>
 80050fa:	2000      	movs	r0, #0
 80050fc:	e008      	b.n	8005110 <_printf_common+0xa8>
 80050fe:	2301      	movs	r3, #1
 8005100:	4652      	mov	r2, sl
 8005102:	4641      	mov	r1, r8
 8005104:	4638      	mov	r0, r7
 8005106:	47c8      	blx	r9
 8005108:	3001      	adds	r0, #1
 800510a:	d103      	bne.n	8005114 <_printf_common+0xac>
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005114:	3501      	adds	r5, #1
 8005116:	e7c6      	b.n	80050a6 <_printf_common+0x3e>
 8005118:	18e1      	adds	r1, r4, r3
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	2030      	movs	r0, #48	@ 0x30
 800511e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005122:	4422      	add	r2, r4
 8005124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800512c:	3302      	adds	r3, #2
 800512e:	e7c7      	b.n	80050c0 <_printf_common+0x58>
 8005130:	2301      	movs	r3, #1
 8005132:	4622      	mov	r2, r4
 8005134:	4641      	mov	r1, r8
 8005136:	4638      	mov	r0, r7
 8005138:	47c8      	blx	r9
 800513a:	3001      	adds	r0, #1
 800513c:	d0e6      	beq.n	800510c <_printf_common+0xa4>
 800513e:	3601      	adds	r6, #1
 8005140:	e7d9      	b.n	80050f6 <_printf_common+0x8e>
	...

08005144 <_printf_i>:
 8005144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005148:	7e0f      	ldrb	r7, [r1, #24]
 800514a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800514c:	2f78      	cmp	r7, #120	@ 0x78
 800514e:	4691      	mov	r9, r2
 8005150:	4680      	mov	r8, r0
 8005152:	460c      	mov	r4, r1
 8005154:	469a      	mov	sl, r3
 8005156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800515a:	d807      	bhi.n	800516c <_printf_i+0x28>
 800515c:	2f62      	cmp	r7, #98	@ 0x62
 800515e:	d80a      	bhi.n	8005176 <_printf_i+0x32>
 8005160:	2f00      	cmp	r7, #0
 8005162:	f000 80d2 	beq.w	800530a <_printf_i+0x1c6>
 8005166:	2f58      	cmp	r7, #88	@ 0x58
 8005168:	f000 80b9 	beq.w	80052de <_printf_i+0x19a>
 800516c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005174:	e03a      	b.n	80051ec <_printf_i+0xa8>
 8005176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800517a:	2b15      	cmp	r3, #21
 800517c:	d8f6      	bhi.n	800516c <_printf_i+0x28>
 800517e:	a101      	add	r1, pc, #4	@ (adr r1, 8005184 <_printf_i+0x40>)
 8005180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005184:	080051dd 	.word	0x080051dd
 8005188:	080051f1 	.word	0x080051f1
 800518c:	0800516d 	.word	0x0800516d
 8005190:	0800516d 	.word	0x0800516d
 8005194:	0800516d 	.word	0x0800516d
 8005198:	0800516d 	.word	0x0800516d
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	0800516d 	.word	0x0800516d
 80051a4:	0800516d 	.word	0x0800516d
 80051a8:	0800516d 	.word	0x0800516d
 80051ac:	0800516d 	.word	0x0800516d
 80051b0:	080052f1 	.word	0x080052f1
 80051b4:	0800521b 	.word	0x0800521b
 80051b8:	080052ab 	.word	0x080052ab
 80051bc:	0800516d 	.word	0x0800516d
 80051c0:	0800516d 	.word	0x0800516d
 80051c4:	08005313 	.word	0x08005313
 80051c8:	0800516d 	.word	0x0800516d
 80051cc:	0800521b 	.word	0x0800521b
 80051d0:	0800516d 	.word	0x0800516d
 80051d4:	0800516d 	.word	0x0800516d
 80051d8:	080052b3 	.word	0x080052b3
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	1d1a      	adds	r2, r3, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6032      	str	r2, [r6, #0]
 80051e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051ec:	2301      	movs	r3, #1
 80051ee:	e09d      	b.n	800532c <_printf_i+0x1e8>
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	1d19      	adds	r1, r3, #4
 80051f6:	6031      	str	r1, [r6, #0]
 80051f8:	0606      	lsls	r6, r0, #24
 80051fa:	d501      	bpl.n	8005200 <_printf_i+0xbc>
 80051fc:	681d      	ldr	r5, [r3, #0]
 80051fe:	e003      	b.n	8005208 <_printf_i+0xc4>
 8005200:	0645      	lsls	r5, r0, #25
 8005202:	d5fb      	bpl.n	80051fc <_printf_i+0xb8>
 8005204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005208:	2d00      	cmp	r5, #0
 800520a:	da03      	bge.n	8005214 <_printf_i+0xd0>
 800520c:	232d      	movs	r3, #45	@ 0x2d
 800520e:	426d      	negs	r5, r5
 8005210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005214:	4859      	ldr	r0, [pc, #356]	@ (800537c <_printf_i+0x238>)
 8005216:	230a      	movs	r3, #10
 8005218:	e011      	b.n	800523e <_printf_i+0xfa>
 800521a:	6821      	ldr	r1, [r4, #0]
 800521c:	6833      	ldr	r3, [r6, #0]
 800521e:	0608      	lsls	r0, r1, #24
 8005220:	f853 5b04 	ldr.w	r5, [r3], #4
 8005224:	d402      	bmi.n	800522c <_printf_i+0xe8>
 8005226:	0649      	lsls	r1, r1, #25
 8005228:	bf48      	it	mi
 800522a:	b2ad      	uxthmi	r5, r5
 800522c:	2f6f      	cmp	r7, #111	@ 0x6f
 800522e:	4853      	ldr	r0, [pc, #332]	@ (800537c <_printf_i+0x238>)
 8005230:	6033      	str	r3, [r6, #0]
 8005232:	bf14      	ite	ne
 8005234:	230a      	movne	r3, #10
 8005236:	2308      	moveq	r3, #8
 8005238:	2100      	movs	r1, #0
 800523a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800523e:	6866      	ldr	r6, [r4, #4]
 8005240:	60a6      	str	r6, [r4, #8]
 8005242:	2e00      	cmp	r6, #0
 8005244:	bfa2      	ittt	ge
 8005246:	6821      	ldrge	r1, [r4, #0]
 8005248:	f021 0104 	bicge.w	r1, r1, #4
 800524c:	6021      	strge	r1, [r4, #0]
 800524e:	b90d      	cbnz	r5, 8005254 <_printf_i+0x110>
 8005250:	2e00      	cmp	r6, #0
 8005252:	d04b      	beq.n	80052ec <_printf_i+0x1a8>
 8005254:	4616      	mov	r6, r2
 8005256:	fbb5 f1f3 	udiv	r1, r5, r3
 800525a:	fb03 5711 	mls	r7, r3, r1, r5
 800525e:	5dc7      	ldrb	r7, [r0, r7]
 8005260:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005264:	462f      	mov	r7, r5
 8005266:	42bb      	cmp	r3, r7
 8005268:	460d      	mov	r5, r1
 800526a:	d9f4      	bls.n	8005256 <_printf_i+0x112>
 800526c:	2b08      	cmp	r3, #8
 800526e:	d10b      	bne.n	8005288 <_printf_i+0x144>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	07df      	lsls	r7, r3, #31
 8005274:	d508      	bpl.n	8005288 <_printf_i+0x144>
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	6861      	ldr	r1, [r4, #4]
 800527a:	4299      	cmp	r1, r3
 800527c:	bfde      	ittt	le
 800527e:	2330      	movle	r3, #48	@ 0x30
 8005280:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005284:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005288:	1b92      	subs	r2, r2, r6
 800528a:	6122      	str	r2, [r4, #16]
 800528c:	f8cd a000 	str.w	sl, [sp]
 8005290:	464b      	mov	r3, r9
 8005292:	aa03      	add	r2, sp, #12
 8005294:	4621      	mov	r1, r4
 8005296:	4640      	mov	r0, r8
 8005298:	f7ff fee6 	bl	8005068 <_printf_common>
 800529c:	3001      	adds	r0, #1
 800529e:	d14a      	bne.n	8005336 <_printf_i+0x1f2>
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	b004      	add	sp, #16
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	f043 0320 	orr.w	r3, r3, #32
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	4833      	ldr	r0, [pc, #204]	@ (8005380 <_printf_i+0x23c>)
 80052b4:	2778      	movs	r7, #120	@ 0x78
 80052b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	6831      	ldr	r1, [r6, #0]
 80052be:	061f      	lsls	r7, r3, #24
 80052c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80052c4:	d402      	bmi.n	80052cc <_printf_i+0x188>
 80052c6:	065f      	lsls	r7, r3, #25
 80052c8:	bf48      	it	mi
 80052ca:	b2ad      	uxthmi	r5, r5
 80052cc:	6031      	str	r1, [r6, #0]
 80052ce:	07d9      	lsls	r1, r3, #31
 80052d0:	bf44      	itt	mi
 80052d2:	f043 0320 	orrmi.w	r3, r3, #32
 80052d6:	6023      	strmi	r3, [r4, #0]
 80052d8:	b11d      	cbz	r5, 80052e2 <_printf_i+0x19e>
 80052da:	2310      	movs	r3, #16
 80052dc:	e7ac      	b.n	8005238 <_printf_i+0xf4>
 80052de:	4827      	ldr	r0, [pc, #156]	@ (800537c <_printf_i+0x238>)
 80052e0:	e7e9      	b.n	80052b6 <_printf_i+0x172>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	f023 0320 	bic.w	r3, r3, #32
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	e7f6      	b.n	80052da <_printf_i+0x196>
 80052ec:	4616      	mov	r6, r2
 80052ee:	e7bd      	b.n	800526c <_printf_i+0x128>
 80052f0:	6833      	ldr	r3, [r6, #0]
 80052f2:	6825      	ldr	r5, [r4, #0]
 80052f4:	6961      	ldr	r1, [r4, #20]
 80052f6:	1d18      	adds	r0, r3, #4
 80052f8:	6030      	str	r0, [r6, #0]
 80052fa:	062e      	lsls	r6, r5, #24
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	d501      	bpl.n	8005304 <_printf_i+0x1c0>
 8005300:	6019      	str	r1, [r3, #0]
 8005302:	e002      	b.n	800530a <_printf_i+0x1c6>
 8005304:	0668      	lsls	r0, r5, #25
 8005306:	d5fb      	bpl.n	8005300 <_printf_i+0x1bc>
 8005308:	8019      	strh	r1, [r3, #0]
 800530a:	2300      	movs	r3, #0
 800530c:	6123      	str	r3, [r4, #16]
 800530e:	4616      	mov	r6, r2
 8005310:	e7bc      	b.n	800528c <_printf_i+0x148>
 8005312:	6833      	ldr	r3, [r6, #0]
 8005314:	1d1a      	adds	r2, r3, #4
 8005316:	6032      	str	r2, [r6, #0]
 8005318:	681e      	ldr	r6, [r3, #0]
 800531a:	6862      	ldr	r2, [r4, #4]
 800531c:	2100      	movs	r1, #0
 800531e:	4630      	mov	r0, r6
 8005320:	f7fa ff7e 	bl	8000220 <memchr>
 8005324:	b108      	cbz	r0, 800532a <_printf_i+0x1e6>
 8005326:	1b80      	subs	r0, r0, r6
 8005328:	6060      	str	r0, [r4, #4]
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	6123      	str	r3, [r4, #16]
 800532e:	2300      	movs	r3, #0
 8005330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005334:	e7aa      	b.n	800528c <_printf_i+0x148>
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	4632      	mov	r2, r6
 800533a:	4649      	mov	r1, r9
 800533c:	4640      	mov	r0, r8
 800533e:	47d0      	blx	sl
 8005340:	3001      	adds	r0, #1
 8005342:	d0ad      	beq.n	80052a0 <_printf_i+0x15c>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	079b      	lsls	r3, r3, #30
 8005348:	d413      	bmi.n	8005372 <_printf_i+0x22e>
 800534a:	68e0      	ldr	r0, [r4, #12]
 800534c:	9b03      	ldr	r3, [sp, #12]
 800534e:	4298      	cmp	r0, r3
 8005350:	bfb8      	it	lt
 8005352:	4618      	movlt	r0, r3
 8005354:	e7a6      	b.n	80052a4 <_printf_i+0x160>
 8005356:	2301      	movs	r3, #1
 8005358:	4632      	mov	r2, r6
 800535a:	4649      	mov	r1, r9
 800535c:	4640      	mov	r0, r8
 800535e:	47d0      	blx	sl
 8005360:	3001      	adds	r0, #1
 8005362:	d09d      	beq.n	80052a0 <_printf_i+0x15c>
 8005364:	3501      	adds	r5, #1
 8005366:	68e3      	ldr	r3, [r4, #12]
 8005368:	9903      	ldr	r1, [sp, #12]
 800536a:	1a5b      	subs	r3, r3, r1
 800536c:	42ab      	cmp	r3, r5
 800536e:	dcf2      	bgt.n	8005356 <_printf_i+0x212>
 8005370:	e7eb      	b.n	800534a <_printf_i+0x206>
 8005372:	2500      	movs	r5, #0
 8005374:	f104 0619 	add.w	r6, r4, #25
 8005378:	e7f5      	b.n	8005366 <_printf_i+0x222>
 800537a:	bf00      	nop
 800537c:	08005541 	.word	0x08005541
 8005380:	08005552 	.word	0x08005552

08005384 <memmove>:
 8005384:	4288      	cmp	r0, r1
 8005386:	b510      	push	{r4, lr}
 8005388:	eb01 0402 	add.w	r4, r1, r2
 800538c:	d902      	bls.n	8005394 <memmove+0x10>
 800538e:	4284      	cmp	r4, r0
 8005390:	4623      	mov	r3, r4
 8005392:	d807      	bhi.n	80053a4 <memmove+0x20>
 8005394:	1e43      	subs	r3, r0, #1
 8005396:	42a1      	cmp	r1, r4
 8005398:	d008      	beq.n	80053ac <memmove+0x28>
 800539a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800539e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053a2:	e7f8      	b.n	8005396 <memmove+0x12>
 80053a4:	4402      	add	r2, r0
 80053a6:	4601      	mov	r1, r0
 80053a8:	428a      	cmp	r2, r1
 80053aa:	d100      	bne.n	80053ae <memmove+0x2a>
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053b6:	e7f7      	b.n	80053a8 <memmove+0x24>

080053b8 <_sbrk_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4d06      	ldr	r5, [pc, #24]	@ (80053d4 <_sbrk_r+0x1c>)
 80053bc:	2300      	movs	r3, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	f7fb fc48 	bl	8000c58 <_sbrk>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_sbrk_r+0x1a>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_sbrk_r+0x1a>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	20004248 	.word	0x20004248

080053d8 <_realloc_r>:
 80053d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053dc:	4680      	mov	r8, r0
 80053de:	4615      	mov	r5, r2
 80053e0:	460c      	mov	r4, r1
 80053e2:	b921      	cbnz	r1, 80053ee <_realloc_r+0x16>
 80053e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053e8:	4611      	mov	r1, r2
 80053ea:	f7ff bc59 	b.w	8004ca0 <_malloc_r>
 80053ee:	b92a      	cbnz	r2, 80053fc <_realloc_r+0x24>
 80053f0:	f7ff fbea 	bl	8004bc8 <_free_r>
 80053f4:	2400      	movs	r4, #0
 80053f6:	4620      	mov	r0, r4
 80053f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053fc:	f000 f81a 	bl	8005434 <_malloc_usable_size_r>
 8005400:	4285      	cmp	r5, r0
 8005402:	4606      	mov	r6, r0
 8005404:	d802      	bhi.n	800540c <_realloc_r+0x34>
 8005406:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800540a:	d8f4      	bhi.n	80053f6 <_realloc_r+0x1e>
 800540c:	4629      	mov	r1, r5
 800540e:	4640      	mov	r0, r8
 8005410:	f7ff fc46 	bl	8004ca0 <_malloc_r>
 8005414:	4607      	mov	r7, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	d0ec      	beq.n	80053f4 <_realloc_r+0x1c>
 800541a:	42b5      	cmp	r5, r6
 800541c:	462a      	mov	r2, r5
 800541e:	4621      	mov	r1, r4
 8005420:	bf28      	it	cs
 8005422:	4632      	movcs	r2, r6
 8005424:	f7ff fbc2 	bl	8004bac <memcpy>
 8005428:	4621      	mov	r1, r4
 800542a:	4640      	mov	r0, r8
 800542c:	f7ff fbcc 	bl	8004bc8 <_free_r>
 8005430:	463c      	mov	r4, r7
 8005432:	e7e0      	b.n	80053f6 <_realloc_r+0x1e>

08005434 <_malloc_usable_size_r>:
 8005434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005438:	1f18      	subs	r0, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	bfbc      	itt	lt
 800543e:	580b      	ldrlt	r3, [r1, r0]
 8005440:	18c0      	addlt	r0, r0, r3
 8005442:	4770      	bx	lr

08005444 <_init>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	bf00      	nop
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr

08005450 <_fini>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr
